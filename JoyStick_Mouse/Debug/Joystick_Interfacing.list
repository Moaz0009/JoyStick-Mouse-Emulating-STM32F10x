
Joystick_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008334  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008440  08008440  00009440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a4  080084a4  0000a168  2**0
                  CONTENTS
  4 .ARM          00000000  080084a4  080084a4  0000a168  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084a4  080084a4  0000a168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a4  080084a4  000094a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  080084ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20000168  08008614  0000a168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  08008614  0000a9e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac7  00000000  00000000  0000a191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f91  00000000  00000000  00017c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0001abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091d  00000000  00000000  0001b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bc6  00000000  00000000  0001c175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e52  00000000  00000000  00035d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089748  00000000  00000000  00046b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d02d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff0  00000000  00000000  000d0318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d3308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000168 	.word	0x20000168
 8000128:	00000000 	.word	0x00000000
 800012c:	08008428 	.word	0x08008428

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000016c 	.word	0x2000016c
 8000148:	08008428 	.word	0x08008428

0800014c <POW>:

#define true 1
#define false 0

unsigned long POW ( unsigned char n,unsigned char p)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	unsigned char i;
	unsigned  long result=1;
 800015c:	2301      	movs	r3, #1
 800015e:	60bb      	str	r3, [r7, #8]
	for (i=0;i<p;i++)
 8000160:	2300      	movs	r3, #0
 8000162:	73fb      	strb	r3, [r7, #15]
 8000164:	e007      	b.n	8000176 <POW+0x2a>
	{
		result=result*n;
 8000166:	79fa      	ldrb	r2, [r7, #7]
 8000168:	68bb      	ldr	r3, [r7, #8]
 800016a:	fb02 f303 	mul.w	r3, r2, r3
 800016e:	60bb      	str	r3, [r7, #8]
	for (i=0;i<p;i++)
 8000170:	7bfb      	ldrb	r3, [r7, #15]
 8000172:	3301      	adds	r3, #1
 8000174:	73fb      	strb	r3, [r7, #15]
 8000176:	7bfa      	ldrb	r2, [r7, #15]
 8000178:	79bb      	ldrb	r3, [r7, #6]
 800017a:	429a      	cmp	r2, r3
 800017c:	d3f3      	bcc.n	8000166 <POW+0x1a>
	}
		return result;
 800017e:	68bb      	ldr	r3, [r7, #8]
}
 8000180:	4618      	mov	r0, r3
 8000182:	3714      	adds	r7, #20
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
	...

0800018c <Num_len>:
	if(mark ==0x2b || mark ==0x2a || mark ==0x2d || mark ==0x2f)
	    return true;
	else return false;
}
unsigned char Num_len(unsigned int temp)
{unsigned char count=0;
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	2300      	movs	r3, #0
 8000196:	73fb      	strb	r3, [r7, #15]
	 while(temp>9)
 8000198:	e008      	b.n	80001ac <Num_len+0x20>
 {
	 temp=temp/10;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4a09      	ldr	r2, [pc, #36]	@ (80001c4 <Num_len+0x38>)
 800019e:	fba2 2303 	umull	r2, r3, r2, r3
 80001a2:	08db      	lsrs	r3, r3, #3
 80001a4:	607b      	str	r3, [r7, #4]
	 count++;
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	3301      	adds	r3, #1
 80001aa:	73fb      	strb	r3, [r7, #15]
	 while(temp>9)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b09      	cmp	r3, #9
 80001b0:	d8f3      	bhi.n	800019a <Num_len+0xe>
 }
 count++;
 80001b2:	7bfb      	ldrb	r3, [r7, #15]
 80001b4:	3301      	adds	r3, #1
 80001b6:	73fb      	strb	r3, [r7, #15]
 return count;
 80001b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	cccccccd 	.word	0xcccccccd

080001c8 <Show_Num>:

void Show_Num (unsigned long op,unsigned char flag)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	unsigned long temp1;
	unsigned char Init_len,len,sent_data;
	Init_len=Num_len(op);
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f7ff ffd9 	bl	800018c <Num_len>
 80001da:	4603      	mov	r3, r0
 80001dc:	75fb      	strb	r3, [r7, #23]
	if(flag>0)
 80001de:	78fb      	ldrb	r3, [r7, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d032      	beq.n	800024a <Show_Num+0x82>
	{
		uint8_t d='-';
 80001e4:	232d      	movs	r3, #45	@ 0x2d
 80001e6:	75bb      	strb	r3, [r7, #22]
		//HAL_UART_Transmit(&huart3 , &d , sizeof(d) ,100);

		Data('-');
 80001e8:	202d      	movs	r0, #45	@ 0x2d
 80001ea:	f000 f861 	bl	80002b0 <Data>

	}
	while(Init_len>0){
 80001ee:	e02c      	b.n	800024a <Show_Num+0x82>
	temp1=op;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	613b      	str	r3, [r7, #16]
	len=Num_len(op);
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f7ff ffc9 	bl	800018c <Num_len>
 80001fa:	4603      	mov	r3, r0
 80001fc:	73fb      	strb	r3, [r7, #15]
	temp1=(temp1/(POW(10,len-1)));
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	3b01      	subs	r3, #1
 8000202:	b2db      	uxtb	r3, r3
 8000204:	4619      	mov	r1, r3
 8000206:	200a      	movs	r0, #10
 8000208:	f7ff ffa0 	bl	800014c <POW>
 800020c:	4602      	mov	r2, r0
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	fbb3 f3f2 	udiv	r3, r3, r2
 8000214:	613b      	str	r3, [r7, #16]
	op=op-(temp1*(POW(10,len-1)));
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	3b01      	subs	r3, #1
 800021a:	b2db      	uxtb	r3, r3
 800021c:	4619      	mov	r1, r3
 800021e:	200a      	movs	r0, #10
 8000220:	f7ff ff94 	bl	800014c <POW>
 8000224:	4602      	mov	r2, r0
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	fb02 f303 	mul.w	r3, r2, r3
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	1ad3      	subs	r3, r2, r3
 8000230:	607b      	str	r3, [r7, #4]
	temp1 |=0x30;
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000238:	613b      	str	r3, [r7, #16]
	Data(temp1);
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f836 	bl	80002b0 <Data>
  ///sent_data=temp1;
	//HAL_UART_Transmit(&huart3 , &sent_data , sizeof(sent_data) ,100);
	Init_len-=1;
 8000244:	7dfb      	ldrb	r3, [r7, #23]
 8000246:	3b01      	subs	r3, #1
 8000248:	75fb      	strb	r3, [r7, #23]
	while(Init_len>0){
 800024a:	7dfb      	ldrb	r3, [r7, #23]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1cf      	bne.n	80001f0 <Show_Num+0x28>
	}}
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <Com>:
//RS PIN C15
//E PIN C14
#define RS GPIO_PIN_15
#define E GPIO_PIN_14
void Com (uint8_t comm )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
GPIOA->ODR=(GPIOA->ODR & 0xFF00)|(uint16_t)comm;
 8000266:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <Com+0x4c>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	490d      	ldr	r1, [pc, #52]	@ (80002a8 <Com+0x4c>)
 8000272:	4313      	orrs	r3, r2
 8000274:	60cb      	str	r3, [r1, #12]
HAL_GPIO_WritePin(GPIOC, RS, RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800027c:	480b      	ldr	r0, [pc, #44]	@ (80002ac <Com+0x50>)
 800027e:	f001 fd05 	bl	8001c8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, E, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000288:	4808      	ldr	r0, [pc, #32]	@ (80002ac <Com+0x50>)
 800028a:	f001 fcff 	bl	8001c8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, E, RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000294:	4805      	ldr	r0, [pc, #20]	@ (80002ac <Com+0x50>)
 8000296:	f001 fcf9 	bl	8001c8c <HAL_GPIO_WritePin>
HAL_Delay(10);
 800029a:	200a      	movs	r0, #10
 800029c:	f000 fc86 	bl	8000bac <HAL_Delay>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40011000 	.word	0x40011000

080002b0 <Data>:
void Data(uint8_t Data_ )
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
GPIOA->ODR=(GPIOA->ODR & 0xFF00)|(uint16_t)Data_;
 80002ba:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <Data+0x4c>)
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	490d      	ldr	r1, [pc, #52]	@ (80002fc <Data+0x4c>)
 80002c6:	4313      	orrs	r3, r2
 80002c8:	60cb      	str	r3, [r1, #12]
HAL_GPIO_WritePin(GPIOC, RS, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002d0:	480b      	ldr	r0, [pc, #44]	@ (8000300 <Data+0x50>)
 80002d2:	f001 fcdb 	bl	8001c8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, E, SET);
 80002d6:	2201      	movs	r2, #1
 80002d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002dc:	4808      	ldr	r0, [pc, #32]	@ (8000300 <Data+0x50>)
 80002de:	f001 fcd5 	bl	8001c8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, E, RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002e8:	4805      	ldr	r0, [pc, #20]	@ (8000300 <Data+0x50>)
 80002ea:	f001 fccf 	bl	8001c8c <HAL_GPIO_WritePin>
HAL_Delay(10);
 80002ee:	200a      	movs	r0, #10
 80002f0:	f000 fc5c 	bl	8000bac <HAL_Delay>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010800 	.word	0x40010800
 8000300:	40011000 	.word	0x40011000

08000304 <LCD_intialise>:
void LCD_intialise()
{Com(0x38);
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
 8000308:	2038      	movs	r0, #56	@ 0x38
 800030a:	f7ff ffa7 	bl	800025c <Com>
Com(0x0E);
 800030e:	200e      	movs	r0, #14
 8000310:	f7ff ffa4 	bl	800025c <Com>
Com(0x01);
 8000314:	2001      	movs	r0, #1
 8000316:	f7ff ffa1 	bl	800025c <Com>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <Mapping_Values>:

uint8_t Left_Click_Button_Flag=0;
uint8_t Right_Click_Button_Flag=0;

 void  Mapping_Values() //Switch From ADC Range [0,4095] -> Mouse Range [0,50]
 {
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	 X_Y[0] = ( ( 50 * ( VR[0] ) ) / 4095) ;
 8000324:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <Mapping_Values+0x48>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2232      	movs	r2, #50	@ 0x32
 800032a:	fb03 f202 	mul.w	r2, r3, r2
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <Mapping_Values+0x4c>)
 8000330:	fba3 1302 	umull	r1, r3, r3, r2
 8000334:	1ad2      	subs	r2, r2, r3
 8000336:	0852      	lsrs	r2, r2, #1
 8000338:	4413      	add	r3, r2
 800033a:	0adb      	lsrs	r3, r3, #11
 800033c:	b21a      	sxth	r2, r3
 800033e:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <Mapping_Values+0x50>)
 8000340:	801a      	strh	r2, [r3, #0]
	 X_Y[1] = ( ( 50 * ( VR[1] ) ) / 4095) ;
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <Mapping_Values+0x48>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	2232      	movs	r2, #50	@ 0x32
 8000348:	fb03 f202 	mul.w	r2, r3, r2
 800034c:	4b07      	ldr	r3, [pc, #28]	@ (800036c <Mapping_Values+0x4c>)
 800034e:	fba3 1302 	umull	r1, r3, r3, r2
 8000352:	1ad2      	subs	r2, r2, r3
 8000354:	0852      	lsrs	r2, r2, #1
 8000356:	4413      	add	r3, r2
 8000358:	0adb      	lsrs	r3, r3, #11
 800035a:	b21a      	sxth	r2, r3
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <Mapping_Values+0x50>)
 800035e:	805a      	strh	r2, [r3, #2]
 }
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	200001f8 	.word	0x200001f8
 800036c:	00100101 	.word	0x00100101
 8000370:	20000200 	.word	0x20000200

08000374 <HAL_GPIO_EXTI_Callback>:
mouseHID mousehid={0,0,0,0};

uint8_t DPI=1,DPI_Flag=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	80fb      	strh	r3, [r7, #6]

	  if(GPIO_Pin==GPIO_PIN_12)
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000384:	d103      	bne.n	800038e <HAL_GPIO_EXTI_Callback+0x1a>
	  {
		  Left_Click_Button_Flag=1;
 8000386:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
		  			break;}


	  }

  }
 800038c:	e02f      	b.n	80003ee <HAL_GPIO_EXTI_Callback+0x7a>
	  else if(GPIO_Pin==GPIO_PIN_14)
 800038e:	88fb      	ldrh	r3, [r7, #6]
 8000390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000394:	d103      	bne.n	800039e <HAL_GPIO_EXTI_Callback+0x2a>
		  Right_Click_Button_Flag=1;
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <HAL_GPIO_EXTI_Callback+0x88>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]
  }
 800039c:	e027      	b.n	80003ee <HAL_GPIO_EXTI_Callback+0x7a>
	  else if (GPIO_Pin == GPIO_PIN_13)
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003a4:	d123      	bne.n	80003ee <HAL_GPIO_EXTI_Callback+0x7a>
		  		DPI_Flag++;
 80003a6:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <HAL_GPIO_EXTI_Callback+0x8c>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	3301      	adds	r3, #1
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <HAL_GPIO_EXTI_Callback+0x8c>)
 80003b0:	701a      	strb	r2, [r3, #0]
		  		if(DPI_Flag==3) //To wrap it back to zero
 80003b2:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <HAL_GPIO_EXTI_Callback+0x8c>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d102      	bne.n	80003c0 <HAL_GPIO_EXTI_Callback+0x4c>
		  			DPI_Flag=0;
 80003ba:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <HAL_GPIO_EXTI_Callback+0x8c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
		  		switch ( DPI_Flag)
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <HAL_GPIO_EXTI_Callback+0x8c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d00e      	beq.n	80003e6 <HAL_GPIO_EXTI_Callback+0x72>
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	dc10      	bgt.n	80003ee <HAL_GPIO_EXTI_Callback+0x7a>
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d002      	beq.n	80003d6 <HAL_GPIO_EXTI_Callback+0x62>
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d004      	beq.n	80003de <HAL_GPIO_EXTI_Callback+0x6a>
  }
 80003d4:	e00b      	b.n	80003ee <HAL_GPIO_EXTI_Callback+0x7a>
		  			DPI=1;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <HAL_GPIO_EXTI_Callback+0x90>)
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
		  			break;
 80003dc:	e007      	b.n	80003ee <HAL_GPIO_EXTI_Callback+0x7a>
		  			DPI=2;
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <HAL_GPIO_EXTI_Callback+0x90>)
 80003e0:	2202      	movs	r2, #2
 80003e2:	701a      	strb	r2, [r3, #0]
		  			break;
 80003e4:	e003      	b.n	80003ee <HAL_GPIO_EXTI_Callback+0x7a>
		  			DPI=3;
 80003e6:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <HAL_GPIO_EXTI_Callback+0x90>)
 80003e8:	2203      	movs	r2, #3
 80003ea:	701a      	strb	r2, [r3, #0]
		  			break;}
 80003ec:	bf00      	nop
  }
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	20000208 	.word	0x20000208
 80003fc:	20000209 	.word	0x20000209
 8000400:	20000210 	.word	0x20000210
 8000404:	20000002 	.word	0x20000002

08000408 <Clear_Lcd>:
void Clear_Lcd()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	  Data(' ');
 800040c:	2020      	movs	r0, #32
 800040e:	f7ff ff4f 	bl	80002b0 <Data>
	 Data(' ');
 8000412:	2020      	movs	r0, #32
 8000414:	f7ff ff4c 	bl	80002b0 <Data>
	Data(' ');
 8000418:	2020      	movs	r0, #32
 800041a:	f7ff ff49 	bl	80002b0 <Data>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <Show_mapped_values>:

void Show_mapped_values()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	      Com(0x80);
 8000428:	2080      	movs	r0, #128	@ 0x80
 800042a:	f7ff ff17 	bl	800025c <Com>
		  Clear_Lcd();
 800042e:	f7ff ffeb 	bl	8000408 <Clear_Lcd>
		  Com(0x80);
 8000432:	2080      	movs	r0, #128	@ 0x80
 8000434:	f7ff ff12 	bl	800025c <Com>
		  Show_Num((X_Y[0]),0);
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <Show_mapped_values+0x44>)
 800043a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fec1 	bl	80001c8 <Show_Num>
		  Com(0xc0);
 8000446:	20c0      	movs	r0, #192	@ 0xc0
 8000448:	f7ff ff08 	bl	800025c <Com>
		  Clear_Lcd();
 800044c:	f7ff ffdc 	bl	8000408 <Clear_Lcd>
		  Com(0xc0);
 8000450:	20c0      	movs	r0, #192	@ 0xc0
 8000452:	f7ff ff03 	bl	800025c <Com>
		  Show_Num((X_Y[1]),0);
 8000456:	4b04      	ldr	r3, [pc, #16]	@ (8000468 <Show_mapped_values+0x44>)
 8000458:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff feb2 	bl	80001c8 <Show_Num>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000200 	.word	0x20000200

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000470:	f000 fb3a 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000474:	f000 f8c6 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000478:	f000 f98e 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 800047c:	f000 f96e 	bl	800075c <MX_DMA_Init>
  MX_ADC1_Init();
 8000480:	f000 f91e 	bl	80006c0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000484:	f007 fbea 	bl	8007c5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LCD_intialise();
 8000488:	f7ff ff3c 	bl	8000304 <LCD_intialise>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, VR, 2); //Satrt Converion
 800048c:	2202      	movs	r2, #2
 800048e:	4951      	ldr	r1, [pc, #324]	@ (80005d4 <main+0x168>)
 8000490:	4851      	ldr	r0, [pc, #324]	@ (80005d8 <main+0x16c>)
 8000492:	f000 fc87 	bl	8000da4 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Mapping_Values();
 8000496:	f7ff ff43 	bl	8000320 <Mapping_Values>
	  Show_mapped_values();
 800049a:	f7ff ffc3 	bl	8000424 <Show_mapped_values>
	  newxval= X_Y[0] - center;
 800049e:	4b4f      	ldr	r3, [pc, #316]	@ (80005dc <main+0x170>)
 80004a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	4b4e      	ldr	r3, [pc, #312]	@ (80005e0 <main+0x174>)
 80004a8:	f993 3000 	ldrsb.w	r3, [r3]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	b21a      	sxth	r2, r3
 80004b4:	4b4b      	ldr	r3, [pc, #300]	@ (80005e4 <main+0x178>)
 80004b6:	801a      	strh	r2, [r3, #0]
	  newyval= X_Y[1] - center;
 80004b8:	4b48      	ldr	r3, [pc, #288]	@ (80005dc <main+0x170>)
 80004ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80004be:	b29a      	uxth	r2, r3
 80004c0:	4b47      	ldr	r3, [pc, #284]	@ (80005e0 <main+0x174>)
 80004c2:	f993 3000 	ldrsb.w	r3, [r3]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	b21a      	sxth	r2, r3
 80004ce:	4b46      	ldr	r3, [pc, #280]	@ (80005e8 <main+0x17c>)
 80004d0:	801a      	strh	r2, [r3, #0]


	  	     if ( (newxval >= threshould ) || (newxval <= (-1*threshould)) )
 80004d2:	4b46      	ldr	r3, [pc, #280]	@ (80005ec <main+0x180>)
 80004d4:	f993 3000 	ldrsb.w	r3, [r3]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b42      	ldr	r3, [pc, #264]	@ (80005e4 <main+0x178>)
 80004dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dd09      	ble.n	80004f8 <main+0x8c>
 80004e4:	4b3f      	ldr	r3, [pc, #252]	@ (80005e4 <main+0x178>)
 80004e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b3f      	ldr	r3, [pc, #252]	@ (80005ec <main+0x180>)
 80004ee:	f993 3000 	ldrsb.w	r3, [r3]
 80004f2:	425b      	negs	r3, r3
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dc0c      	bgt.n	8000512 <main+0xa6>
	  	     {
	  	  	   mousehid.mouse_x= (newxval)*DPI;
 80004f8:	4b3a      	ldr	r3, [pc, #232]	@ (80005e4 <main+0x178>)
 80004fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	4a3b      	ldr	r2, [pc, #236]	@ (80005f0 <main+0x184>)
 8000502:	7812      	ldrb	r2, [r2, #0]
 8000504:	fb02 f303 	mul.w	r3, r2, r3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	b25a      	sxtb	r2, r3
 800050c:	4b39      	ldr	r3, [pc, #228]	@ (80005f4 <main+0x188>)
 800050e:	705a      	strb	r2, [r3, #1]
 8000510:	e002      	b.n	8000518 <main+0xac>
	  	     }
	  	     else
	  	     {
	  	  	   mousehid.mouse_x=0;
 8000512:	4b38      	ldr	r3, [pc, #224]	@ (80005f4 <main+0x188>)
 8000514:	2200      	movs	r2, #0
 8000516:	705a      	strb	r2, [r3, #1]
	  	     }
	        if ( (newyval >= threshould ) || (newyval <= (-1*threshould)) )
 8000518:	4b34      	ldr	r3, [pc, #208]	@ (80005ec <main+0x180>)
 800051a:	f993 3000 	ldrsb.w	r3, [r3]
 800051e:	461a      	mov	r2, r3
 8000520:	4b31      	ldr	r3, [pc, #196]	@ (80005e8 <main+0x17c>)
 8000522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000526:	429a      	cmp	r2, r3
 8000528:	dd09      	ble.n	800053e <main+0xd2>
 800052a:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <main+0x17c>)
 800052c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000530:	461a      	mov	r2, r3
 8000532:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <main+0x180>)
 8000534:	f993 3000 	ldrsb.w	r3, [r3]
 8000538:	425b      	negs	r3, r3
 800053a:	429a      	cmp	r2, r3
 800053c:	dc0c      	bgt.n	8000558 <main+0xec>
	  	     {
	  	  	   mousehid.mouse_y= (newyval)*DPI;
 800053e:	4b2a      	ldr	r3, [pc, #168]	@ (80005e8 <main+0x17c>)
 8000540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4a2a      	ldr	r2, [pc, #168]	@ (80005f0 <main+0x184>)
 8000548:	7812      	ldrb	r2, [r2, #0]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	b25a      	sxtb	r2, r3
 8000552:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <main+0x188>)
 8000554:	709a      	strb	r2, [r3, #2]
 8000556:	e002      	b.n	800055e <main+0xf2>
	  	     }
	  	     else
	  	     {
	  	  	   mousehid.mouse_y=0;
 8000558:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <main+0x188>)
 800055a:	2200      	movs	r2, #0
 800055c:	709a      	strb	r2, [r3, #2]
	  	     }

	  	     if(Left_Click_Button_Flag==1)
 800055e:	4b26      	ldr	r3, [pc, #152]	@ (80005f8 <main+0x18c>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d115      	bne.n	8000592 <main+0x126>
	  	     {
	  	  	   mousehid.button=1; //00000001
 8000566:	4b23      	ldr	r3, [pc, #140]	@ (80005f4 <main+0x188>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
	  	  	   USBD_HID_SendReport( &hUsbDeviceFS,&mousehid, sizeof(mousehid));
 800056c:	2204      	movs	r2, #4
 800056e:	4921      	ldr	r1, [pc, #132]	@ (80005f4 <main+0x188>)
 8000570:	4822      	ldr	r0, [pc, #136]	@ (80005fc <main+0x190>)
 8000572:	f006 fa87 	bl	8006a84 <USBD_HID_SendReport>
	  	  	   HAL_Delay(50);
 8000576:	2032      	movs	r0, #50	@ 0x32
 8000578:	f000 fb18 	bl	8000bac <HAL_Delay>
	  	  	   mousehid.button=0;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <main+0x188>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	  	  	   USBD_HID_SendReport( &hUsbDeviceFS,&mousehid, sizeof(mousehid));
 8000582:	2204      	movs	r2, #4
 8000584:	491b      	ldr	r1, [pc, #108]	@ (80005f4 <main+0x188>)
 8000586:	481d      	ldr	r0, [pc, #116]	@ (80005fc <main+0x190>)
 8000588:	f006 fa7c 	bl	8006a84 <USBD_HID_SendReport>
	  	  	   Left_Click_Button_Flag=0;
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <main+0x18c>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
	  	     }
	  	    if(Right_Click_Button_Flag==1)
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <main+0x194>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d115      	bne.n	80005c6 <main+0x15a>
	  	    {
	  	    	   mousehid.button =(1<<1); //00000010
 800059a:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <main+0x188>)
 800059c:	2202      	movs	r2, #2
 800059e:	701a      	strb	r2, [r3, #0]
	  	    	   USBD_HID_SendReport( &hUsbDeviceFS,&mousehid, sizeof(mousehid));
 80005a0:	2204      	movs	r2, #4
 80005a2:	4914      	ldr	r1, [pc, #80]	@ (80005f4 <main+0x188>)
 80005a4:	4815      	ldr	r0, [pc, #84]	@ (80005fc <main+0x190>)
 80005a6:	f006 fa6d 	bl	8006a84 <USBD_HID_SendReport>
	  	    	   HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	@ 0x32
 80005ac:	f000 fafe 	bl	8000bac <HAL_Delay>
	  	    	   mousehid.button=0;
 80005b0:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <main+0x188>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	  	    	   USBD_HID_SendReport( &hUsbDeviceFS,&mousehid, sizeof(mousehid));
 80005b6:	2204      	movs	r2, #4
 80005b8:	490e      	ldr	r1, [pc, #56]	@ (80005f4 <main+0x188>)
 80005ba:	4810      	ldr	r0, [pc, #64]	@ (80005fc <main+0x190>)
 80005bc:	f006 fa62 	bl	8006a84 <USBD_HID_SendReport>
	  	    	   Right_Click_Button_Flag=0;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <main+0x194>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	  	    }

	  	     USBD_HID_SendReport( &hUsbDeviceFS,&mousehid, sizeof(mousehid) );
 80005c6:	2204      	movs	r2, #4
 80005c8:	490a      	ldr	r1, [pc, #40]	@ (80005f4 <main+0x188>)
 80005ca:	480c      	ldr	r0, [pc, #48]	@ (80005fc <main+0x190>)
 80005cc:	f006 fa5a 	bl	8006a84 <USBD_HID_SendReport>
	  Mapping_Values();
 80005d0:	e761      	b.n	8000496 <main+0x2a>
 80005d2:	bf00      	nop
 80005d4:	200001f8 	.word	0x200001f8
 80005d8:	20000184 	.word	0x20000184
 80005dc:	20000200 	.word	0x20000200
 80005e0:	20000001 	.word	0x20000001
 80005e4:	20000204 	.word	0x20000204
 80005e8:	20000206 	.word	0x20000206
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000002 	.word	0x20000002
 80005f4:	2000020c 	.word	0x2000020c
 80005f8:	20000208 	.word	0x20000208
 80005fc:	2000021c 	.word	0x2000021c
 8000600:	20000209 	.word	0x20000209

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060e:	2228      	movs	r2, #40	@ 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fedc 	bl	80083d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000650:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f89c 	bl	8003798 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000666:	f000 f923 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800067a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fb08 	bl	8003c9c <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000692:	f000 f90d 	bl	80008b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000696:	2312      	movs	r3, #18
 8000698:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800069a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800069e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fc54 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006b2:	f000 f8fd 	bl	80008b0 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d0:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_ADC1_Init+0x94>)
 80006d2:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_ADC1_Init+0x94>)
 80006d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_ADC1_Init+0x94>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_ADC1_Init+0x94>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_ADC1_Init+0x94>)
 80006ec:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80006f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_ADC1_Init+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_ADC1_Init+0x94>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fe:	4815      	ldr	r0, [pc, #84]	@ (8000754 <MX_ADC1_Init+0x94>)
 8000700:	f000 fa78 	bl	8000bf4 <HAL_ADC_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800070a:	f000 f8d1 	bl	80008b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800070e:	2308      	movs	r3, #8
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000716:	2307      	movs	r3, #7
 8000718:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_ADC1_Init+0x94>)
 8000720:	f000 fc3a 	bl	8000f98 <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f8c1 	bl	80008b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800072e:	2309      	movs	r3, #9
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_ADC1_Init+0x94>)
 800073c:	f000 fc2c 	bl	8000f98 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000746:	f000 f8b3 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000184 	.word	0x20000184
 8000758:	40012400 	.word	0x40012400

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_DMA_Init+0x38>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a0b      	ldr	r2, [pc, #44]	@ (8000794 <MX_DMA_Init+0x38>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_DMA_Init+0x38>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200b      	movs	r0, #11
 8000780:	f000 fedb 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000784:	200b      	movs	r0, #11
 8000786:	f000 fef4 	bl	8001572 <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ac:	4b3b      	ldr	r3, [pc, #236]	@ (800089c <MX_GPIO_Init+0x104>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a3a      	ldr	r2, [pc, #232]	@ (800089c <MX_GPIO_Init+0x104>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b38      	ldr	r3, [pc, #224]	@ (800089c <MX_GPIO_Init+0x104>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c4:	4b35      	ldr	r3, [pc, #212]	@ (800089c <MX_GPIO_Init+0x104>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a34      	ldr	r2, [pc, #208]	@ (800089c <MX_GPIO_Init+0x104>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b32      	ldr	r3, [pc, #200]	@ (800089c <MX_GPIO_Init+0x104>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0320 	and.w	r3, r3, #32
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b2f      	ldr	r3, [pc, #188]	@ (800089c <MX_GPIO_Init+0x104>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a2e      	ldr	r2, [pc, #184]	@ (800089c <MX_GPIO_Init+0x104>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <MX_GPIO_Init+0x104>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b29      	ldr	r3, [pc, #164]	@ (800089c <MX_GPIO_Init+0x104>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a28      	ldr	r2, [pc, #160]	@ (800089c <MX_GPIO_Init+0x104>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b26      	ldr	r3, [pc, #152]	@ (800089c <MX_GPIO_Init+0x104>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000812:	4823      	ldr	r0, [pc, #140]	@ (80008a0 <MX_GPIO_Init+0x108>)
 8000814:	f001 fa3a 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800081e:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <MX_GPIO_Init+0x108>)
 8000820:	f001 fa34 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000824:	2200      	movs	r2, #0
 8000826:	21ff      	movs	r1, #255	@ 0xff
 8000828:	481e      	ldr	r0, [pc, #120]	@ (80008a4 <MX_GPIO_Init+0x10c>)
 800082a:	f001 fa2f 	bl	8001c8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800082e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2302      	movs	r3, #2
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <MX_GPIO_Init+0x108>)
 8000848:	f001 f89c 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084c:	23ff      	movs	r3, #255	@ 0xff
 800084e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <MX_GPIO_Init+0x10c>)
 8000864:	f001 f88e 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000868:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_GPIO_Init+0x110>)
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4619      	mov	r1, r3
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <MX_GPIO_Init+0x114>)
 800087e:	f001 f881 	bl	8001984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2028      	movs	r0, #40	@ 0x28
 8000888:	f000 fe57 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088c:	2028      	movs	r0, #40	@ 0x28
 800088e:	f000 fe70 	bl	8001572 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	40011000 	.word	0x40011000
 80008a4:	40010800 	.word	0x40010800
 80008a8:	10210000 	.word	0x10210000
 80008ac:	40010c00 	.word	0x40010c00

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_MspInit+0x5c>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <HAL_MspInit+0x5c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_MspInit+0x5c>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x5c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <HAL_MspInit+0x5c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_MspInit+0x5c>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008f2:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <HAL_MspInit+0x60>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <HAL_MspInit+0x60>)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40021000 	.word	0x40021000
 800091c:	40010000 	.word	0x40010000

08000920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <HAL_ADC_MspInit+0xbc>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d149      	bne.n	80009d4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000940:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <HAL_ADC_MspInit+0xc0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a26      	ldr	r2, [pc, #152]	@ (80009e0 <HAL_ADC_MspInit+0xc0>)
 8000946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <HAL_ADC_MspInit+0xc0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <HAL_ADC_MspInit+0xc0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a20      	ldr	r2, [pc, #128]	@ (80009e0 <HAL_ADC_MspInit+0xc0>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <HAL_ADC_MspInit+0xc0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000970:	2303      	movs	r3, #3
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000974:	2303      	movs	r3, #3
 8000976:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	4819      	ldr	r0, [pc, #100]	@ (80009e4 <HAL_ADC_MspInit+0xc4>)
 8000980:	f001 f800 	bl	8001984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 8000986:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <HAL_ADC_MspInit+0xcc>)
 8000988:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 800099e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009a4:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009ae:	2220      	movs	r2, #32
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009ba:	f000 fdf5 	bl	80015a8 <HAL_DMA_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80009c4:	f7ff ff74 	bl	80008b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009cc:	621a      	str	r2, [r3, #32]
 80009ce:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40012400 	.word	0x40012400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	200001b4 	.word	0x200001b4
 80009ec:	40020008 	.word	0x40020008

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <NMI_Handler+0x4>

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f898 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <DMA1_Channel1_IRQHandler+0x10>)
 8000a4e:	f000 fe65 	bl	800171c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001b4 	.word	0x200001b4

08000a5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a62:	f001 fa68 	bl	8001f36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200006e0 	.word	0x200006e0

08000a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000a78:	f001 f920 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a80:	f001 f91c 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000a84:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a88:	f001 f918 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff fff8 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aa2:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a09      	ldr	r2, [pc, #36]	@ (8000adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab8:	4c09      	ldr	r4, [pc, #36]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f007 fc8b 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fccf 	bl	800046c <main>
  bx lr
 8000ace:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000ad8:	080084ac 	.word	0x080084ac
  ldr r2, =_sbss
 8000adc:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000ae0:	200009e4 	.word	0x200009e4

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fd13 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff feda 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fd2b 	bl	800158e <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 fcf3 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	20000008 	.word	0x20000008

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a03      	ldr	r2, [pc, #12]	@ (8000b94 <HAL_IncTick+0x20>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	20000214 	.word	0x20000214

08000b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000214 	.word	0x20000214

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff0 	bl	8000b98 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffe0 	bl	8000b98 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000000c 	.word	0x2000000c

08000bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0be      	b.n	8000d94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe74 	bl	8000920 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 faff 	bl	800123c <ADC_ConversionStop_Disable>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8099 	bne.w	8000d82 <HAL_ADC_Init+0x18e>
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8095 	bne.w	8000d82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c60:	f023 0302 	bic.w	r3, r3, #2
 8000c64:	f043 0202 	orr.w	r2, r3, #2
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b1b      	ldrb	r3, [r3, #12]
 8000c7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c8c:	d003      	beq.n	8000c96 <HAL_ADC_Init+0xa2>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d102      	bne.n	8000c9c <HAL_ADC_Init+0xa8>
 8000c96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c9a:	e000      	b.n	8000c9e <HAL_ADC_Init+0xaa>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7d1b      	ldrb	r3, [r3, #20]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d119      	bne.n	8000ce0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7b1b      	ldrb	r3, [r3, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d109      	bne.n	8000cc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	035a      	lsls	r2, r3, #13
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e00b      	b.n	8000ce0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ccc:	f043 0220 	orr.w	r2, r3, #32
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	f043 0201 	orr.w	r2, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <HAL_ADC_Init+0x1a8>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d10:	d003      	beq.n	8000d1a <HAL_ADC_Init+0x126>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d104      	bne.n	8000d24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	051b      	lsls	r3, r3, #20
 8000d22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_ADC_Init+0x1ac>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d10b      	bne.n	8000d60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d52:	f023 0303 	bic.w	r3, r3, #3
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5e:	e018      	b.n	8000d92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d64:	f023 0312 	bic.w	r3, r3, #18
 8000d68:	f043 0210 	orr.w	r2, r3, #16
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	f043 0201 	orr.w	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d80:	e007      	b.n	8000d92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000da0:	ff1f0efe 	.word	0xff1f0efe

08000da4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a64      	ldr	r2, [pc, #400]	@ (8000f4c <HAL_ADC_Start_DMA+0x1a8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d004      	beq.n	8000dc8 <HAL_ADC_Start_DMA+0x24>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a63      	ldr	r2, [pc, #396]	@ (8000f50 <HAL_ADC_Start_DMA+0x1ac>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d106      	bne.n	8000dd6 <HAL_ADC_Start_DMA+0x32>
 8000dc8:	4b60      	ldr	r3, [pc, #384]	@ (8000f4c <HAL_ADC_Start_DMA+0x1a8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 80b3 	bne.w	8000f3c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d101      	bne.n	8000de4 <HAL_ADC_Start_DMA+0x40>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e0ae      	b.n	8000f42 <HAL_ADC_Start_DMA+0x19e>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f000 f9cb 	bl	8001188 <ADC_Enable>
 8000df2:	4603      	mov	r3, r0
 8000df4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f040 809a 	bne.w	8000f32 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a4e      	ldr	r2, [pc, #312]	@ (8000f50 <HAL_ADC_Start_DMA+0x1ac>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d105      	bne.n	8000e28 <HAL_ADC_Start_DMA+0x84>
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f4c <HAL_ADC_Start_DMA+0x1a8>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d115      	bne.n	8000e54 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d026      	beq.n	8000e90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e52:	e01d      	b.n	8000e90 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a39      	ldr	r2, [pc, #228]	@ (8000f4c <HAL_ADC_Start_DMA+0x1a8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d004      	beq.n	8000e74 <HAL_ADC_Start_DMA+0xd0>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a38      	ldr	r2, [pc, #224]	@ (8000f50 <HAL_ADC_Start_DMA+0x1ac>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d10d      	bne.n	8000e90 <HAL_ADC_Start_DMA+0xec>
 8000e74:	4b35      	ldr	r3, [pc, #212]	@ (8000f4c <HAL_ADC_Start_DMA+0x1a8>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea0:	f023 0206 	bic.w	r2, r3, #6
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ea8:	e002      	b.n	8000eb0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <HAL_ADC_Start_DMA+0x1b0>)
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a24      	ldr	r2, [pc, #144]	@ (8000f58 <HAL_ADC_Start_DMA+0x1b4>)
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a23      	ldr	r2, [pc, #140]	@ (8000f5c <HAL_ADC_Start_DMA+0x1b8>)
 8000ece:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f06f 0202 	mvn.w	r2, #2
 8000ed8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ee8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a18      	ldr	r0, [r3, #32]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	334c      	adds	r3, #76	@ 0x4c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f000 fbaf 	bl	800165c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f08:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f0c:	d108      	bne.n	8000f20 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000f1c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f1e:	e00f      	b.n	8000f40 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000f2e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f30:	e006      	b.n	8000f40 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000f3a:	e001      	b.n	8000f40 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012400 	.word	0x40012400
 8000f50:	40012800 	.word	0x40012800
 8000f54:	080012bf 	.word	0x080012bf
 8000f58:	0800133b 	.word	0x0800133b
 8000f5c:	08001357 	.word	0x08001357

08000f60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x20>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e0dc      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1da>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b06      	cmp	r3, #6
 8000fc6:	d81c      	bhi.n	8001002 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b05      	subs	r3, #5
 8000fda:	221f      	movs	r2, #31
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4019      	ands	r1, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b05      	subs	r3, #5
 8000ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001000:	e03c      	b.n	800107c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d81c      	bhi.n	8001044 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	3b23      	subs	r3, #35	@ 0x23
 800101c:	221f      	movs	r2, #31
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	4019      	ands	r1, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b23      	subs	r3, #35	@ 0x23
 8001036:	fa00 f203 	lsl.w	r2, r0, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	631a      	str	r2, [r3, #48]	@ 0x30
 8001042:	e01b      	b.n	800107c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3b41      	subs	r3, #65	@ 0x41
 8001056:	221f      	movs	r2, #31
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	4019      	ands	r1, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b41      	subs	r3, #65	@ 0x41
 8001070:	fa00 f203 	lsl.w	r2, r0, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	430a      	orrs	r2, r1
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b09      	cmp	r3, #9
 8001082:	d91c      	bls.n	80010be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	3b1e      	subs	r3, #30
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	4019      	ands	r1, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6898      	ldr	r0, [r3, #8]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	3b1e      	subs	r3, #30
 80010b0:	fa00 f203 	lsl.w	r2, r0, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	e019      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6919      	ldr	r1, [r3, #16]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	2207      	movs	r2, #7
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4019      	ands	r1, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6898      	ldr	r0, [r3, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b10      	cmp	r3, #16
 80010f8:	d003      	beq.n	8001102 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010fe:	2b11      	cmp	r3, #17
 8001100:	d132      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1d      	ldr	r2, [pc, #116]	@ (800117c <HAL_ADC_ConfigChannel+0x1e4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d125      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d126      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001128:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b10      	cmp	r3, #16
 8001130:	d11a      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_ConfigChannel+0x1e8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <HAL_ADC_ConfigChannel+0x1ec>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9a      	lsrs	r2, r3, #18
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001148:	e002      	b.n	8001150 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <HAL_ADC_ConfigChannel+0x1b2>
 8001156:	e007      	b.n	8001168 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115c:	f043 0220 	orr.w	r2, r3, #32
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40012400 	.word	0x40012400
 8001180:	20000004 	.word	0x20000004
 8001184:	431bde83 	.word	0x431bde83

08001188 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d040      	beq.n	8001228 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <ADC_Enable+0xac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001238 <ADC_Enable+0xb0>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	0c9b      	lsrs	r3, r3, #18
 80011c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011c4:	e002      	b.n	80011cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011d2:	f7ff fce1 	bl	8000b98 <HAL_GetTick>
 80011d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011d8:	e01f      	b.n	800121a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011da:	f7ff fcdd 	bl	8000b98 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d918      	bls.n	800121a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d011      	beq.n	800121a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	f043 0210 	orr.w	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e007      	b.n	800122a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b01      	cmp	r3, #1
 8001226:	d1d8      	bne.n	80011da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000004 	.word	0x20000004
 8001238:	431bde83 	.word	0x431bde83

0800123c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b01      	cmp	r3, #1
 8001254:	d12e      	bne.n	80012b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001266:	f7ff fc97 	bl	8000b98 <HAL_GetTick>
 800126a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800126c:	e01b      	b.n	80012a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800126e:	f7ff fc93 	bl	8000b98 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d914      	bls.n	80012a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10d      	bne.n	80012a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128e:	f043 0210 	orr.w	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e007      	b.n	80012b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d0dc      	beq.n	800126e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d127      	bne.n	8001328 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80012ee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012f2:	d115      	bne.n	8001320 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d111      	bne.n	8001320 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f7ff fe1d 	bl	8000f60 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001326:	e004      	b.n	8001332 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	4798      	blx	r3
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff fe12 	bl	8000f72 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	f043 0204 	orr.w	r2, r3, #4
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff fe01 	bl	8000f84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4906      	ldr	r1, [pc, #24]	@ (8001424 <__NVIC_EnableIRQ+0x34>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	@ 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	@ 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff90 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff2d 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff42 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff90 	bl	800147c <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5f 	bl	8001428 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff35 	bl	80013f0 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e043      	b.n	8001646 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <HAL_DMA_Init+0xa8>)
 80015c6:	4413      	add	r3, r2
 80015c8:	4a22      	ldr	r2, [pc, #136]	@ (8001654 <HAL_DMA_Init+0xac>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <HAL_DMA_Init+0xb0>)
 80015da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80015f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	bffdfff8 	.word	0xbffdfff8
 8001654:	cccccccd 	.word	0xcccccccd
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_DMA_Start_IT+0x20>
 8001678:	2302      	movs	r3, #2
 800167a:	e04b      	b.n	8001714 <HAL_DMA_Start_IT+0xb8>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d13a      	bne.n	8001706 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f937 	bl	8001928 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d008      	beq.n	80016d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 020e 	orr.w	r2, r2, #14
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e00f      	b.n	80016f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0204 	bic.w	r2, r2, #4
 80016e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 020a 	orr.w	r2, r2, #10
 80016f2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e005      	b.n	8001712 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800170e:	2302      	movs	r3, #2
 8001710:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001712:	7dfb      	ldrb	r3, [r7, #23]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	2204      	movs	r2, #4
 800173a:	409a      	lsls	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d04f      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xc8>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d04a      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0204 	bic.w	r2, r2, #4
 800176a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a66      	ldr	r2, [pc, #408]	@ (800190c <HAL_DMA_IRQHandler+0x1f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d029      	beq.n	80017ca <HAL_DMA_IRQHandler+0xae>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a65      	ldr	r2, [pc, #404]	@ (8001910 <HAL_DMA_IRQHandler+0x1f4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <HAL_DMA_IRQHandler+0xaa>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a63      	ldr	r2, [pc, #396]	@ (8001914 <HAL_DMA_IRQHandler+0x1f8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01a      	beq.n	80017c0 <HAL_DMA_IRQHandler+0xa4>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a62      	ldr	r2, [pc, #392]	@ (8001918 <HAL_DMA_IRQHandler+0x1fc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d012      	beq.n	80017ba <HAL_DMA_IRQHandler+0x9e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a60      	ldr	r2, [pc, #384]	@ (800191c <HAL_DMA_IRQHandler+0x200>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x98>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001920 <HAL_DMA_IRQHandler+0x204>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d102      	bne.n	80017ae <HAL_DMA_IRQHandler+0x92>
 80017a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_IRQHandler+0xb0>
 80017ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80017b2:	e00b      	b.n	80017cc <HAL_DMA_IRQHandler+0xb0>
 80017b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017b8:	e008      	b.n	80017cc <HAL_DMA_IRQHandler+0xb0>
 80017ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017be:	e005      	b.n	80017cc <HAL_DMA_IRQHandler+0xb0>
 80017c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c4:	e002      	b.n	80017cc <HAL_DMA_IRQHandler+0xb0>
 80017c6:	2340      	movs	r3, #64	@ 0x40
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0xb0>
 80017ca:	2304      	movs	r3, #4
 80017cc:	4a55      	ldr	r2, [pc, #340]	@ (8001924 <HAL_DMA_IRQHandler+0x208>)
 80017ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8094 	beq.w	8001902 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017e2:	e08e      	b.n	8001902 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	2202      	movs	r2, #2
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d056      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x186>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d051      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10b      	bne.n	8001824 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 020a 	bic.w	r2, r2, #10
 800181a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a38      	ldr	r2, [pc, #224]	@ (800190c <HAL_DMA_IRQHandler+0x1f0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d029      	beq.n	8001882 <HAL_DMA_IRQHandler+0x166>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a37      	ldr	r2, [pc, #220]	@ (8001910 <HAL_DMA_IRQHandler+0x1f4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d022      	beq.n	800187e <HAL_DMA_IRQHandler+0x162>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a35      	ldr	r2, [pc, #212]	@ (8001914 <HAL_DMA_IRQHandler+0x1f8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01a      	beq.n	8001878 <HAL_DMA_IRQHandler+0x15c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a34      	ldr	r2, [pc, #208]	@ (8001918 <HAL_DMA_IRQHandler+0x1fc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d012      	beq.n	8001872 <HAL_DMA_IRQHandler+0x156>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a32      	ldr	r2, [pc, #200]	@ (800191c <HAL_DMA_IRQHandler+0x200>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00a      	beq.n	800186c <HAL_DMA_IRQHandler+0x150>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a31      	ldr	r2, [pc, #196]	@ (8001920 <HAL_DMA_IRQHandler+0x204>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d102      	bne.n	8001866 <HAL_DMA_IRQHandler+0x14a>
 8001860:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001864:	e00e      	b.n	8001884 <HAL_DMA_IRQHandler+0x168>
 8001866:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800186a:	e00b      	b.n	8001884 <HAL_DMA_IRQHandler+0x168>
 800186c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001870:	e008      	b.n	8001884 <HAL_DMA_IRQHandler+0x168>
 8001872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001876:	e005      	b.n	8001884 <HAL_DMA_IRQHandler+0x168>
 8001878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800187c:	e002      	b.n	8001884 <HAL_DMA_IRQHandler+0x168>
 800187e:	2320      	movs	r3, #32
 8001880:	e000      	b.n	8001884 <HAL_DMA_IRQHandler+0x168>
 8001882:	2302      	movs	r3, #2
 8001884:	4a27      	ldr	r2, [pc, #156]	@ (8001924 <HAL_DMA_IRQHandler+0x208>)
 8001886:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	2b00      	cmp	r3, #0
 8001896:	d034      	beq.n	8001902 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018a0:	e02f      	b.n	8001902 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	2208      	movs	r2, #8
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d028      	beq.n	8001904 <HAL_DMA_IRQHandler+0x1e8>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d023      	beq.n	8001904 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 020e 	bic.w	r2, r2, #14
 80018ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	4798      	blx	r3
    }
  }
  return;
 8001902:	bf00      	nop
 8001904:	bf00      	nop
}
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40020008 	.word	0x40020008
 8001910:	4002001c 	.word	0x4002001c
 8001914:	40020030 	.word	0x40020030
 8001918:	40020044 	.word	0x40020044
 800191c:	40020058 	.word	0x40020058
 8001920:	4002006c 	.word	0x4002006c
 8001924:	40020000 	.word	0x40020000

08001928 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d108      	bne.n	8001968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001966:	e007      	b.n	8001978 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b08b      	sub	sp, #44	@ 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e169      	b.n	8001c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001998:	2201      	movs	r2, #1
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8158 	bne.w	8001c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d05e      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019c0:	4a98      	ldr	r2, [pc, #608]	@ (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d875      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019c6:	4a98      	ldr	r2, [pc, #608]	@ (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d058      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019cc:	4a96      	ldr	r2, [pc, #600]	@ (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d86f      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019d2:	4a96      	ldr	r2, [pc, #600]	@ (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d052      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019d8:	4a94      	ldr	r2, [pc, #592]	@ (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d869      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019de:	4a94      	ldr	r2, [pc, #592]	@ (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04c      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019e4:	4a92      	ldr	r2, [pc, #584]	@ (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d863      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019ea:	4a92      	ldr	r2, [pc, #584]	@ (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d046      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019f0:	4a90      	ldr	r2, [pc, #576]	@ (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d85d      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d82a      	bhi.n	8001a50 <HAL_GPIO_Init+0xcc>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d859      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <HAL_GPIO_Init+0x80>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001a59 	.word	0x08001a59
 8001a0c:	08001a6b 	.word	0x08001a6b
 8001a10:	08001aad 	.word	0x08001aad
 8001a14:	08001ab3 	.word	0x08001ab3
 8001a18:	08001ab3 	.word	0x08001ab3
 8001a1c:	08001ab3 	.word	0x08001ab3
 8001a20:	08001ab3 	.word	0x08001ab3
 8001a24:	08001ab3 	.word	0x08001ab3
 8001a28:	08001ab3 	.word	0x08001ab3
 8001a2c:	08001ab3 	.word	0x08001ab3
 8001a30:	08001ab3 	.word	0x08001ab3
 8001a34:	08001ab3 	.word	0x08001ab3
 8001a38:	08001ab3 	.word	0x08001ab3
 8001a3c:	08001ab3 	.word	0x08001ab3
 8001a40:	08001ab3 	.word	0x08001ab3
 8001a44:	08001ab3 	.word	0x08001ab3
 8001a48:	08001a61 	.word	0x08001a61
 8001a4c:	08001a75 	.word	0x08001a75
 8001a50:	4a79      	ldr	r2, [pc, #484]	@ (8001c38 <HAL_GPIO_Init+0x2b4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a56:	e02c      	b.n	8001ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e029      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	3304      	adds	r3, #4
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e024      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	623b      	str	r3, [r7, #32]
          break;
 8001a72:	e01f      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e01a      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a86:	2304      	movs	r3, #4
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e013      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a94:	2308      	movs	r3, #8
 8001a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	611a      	str	r2, [r3, #16]
          break;
 8001a9e:	e009      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	615a      	str	r2, [r3, #20]
          break;
 8001aaa:	e003      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          break;
 8001ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	@ 0xff
 8001ab8:	d801      	bhi.n	8001abe <HAL_GPIO_Init+0x13a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_Init+0x13e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	@ 0xff
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_GPIO_Init+0x14c>
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x152>
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	210f      	movs	r1, #15
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80b1 	beq.w	8001c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b04:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	@ (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b1c:	4a48      	ldr	r2, [pc, #288]	@ (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a40      	ldr	r2, [pc, #256]	@ (8001c44 <HAL_GPIO_Init+0x2c0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <HAL_GPIO_Init+0x1ec>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1e8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3e      	ldr	r2, [pc, #248]	@ (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1e0>
 8001b60:	2303      	movs	r3, #3
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b70:	2300      	movs	r3, #0
 8001b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	4093      	lsls	r3, r2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b82:	492f      	ldr	r1, [pc, #188]	@ (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	492c      	ldr	r1, [pc, #176]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001baa:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4928      	ldr	r1, [pc, #160]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4922      	ldr	r1, [pc, #136]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	491e      	ldr	r1, [pc, #120]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4918      	ldr	r1, [pc, #96]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4914      	ldr	r1, [pc, #80]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d021      	beq.n	8001c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	490e      	ldr	r1, [pc, #56]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e021      	b.n	8001c66 <HAL_GPIO_Init+0x2e2>
 8001c22:	bf00      	nop
 8001c24:	10320000 	.word	0x10320000
 8001c28:	10310000 	.word	0x10310000
 8001c2c:	10220000 	.word	0x10220000
 8001c30:	10210000 	.word	0x10210000
 8001c34:	10120000 	.word	0x10120000
 8001c38:	10110000 	.word	0x10110000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40010800 	.word	0x40010800
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40011400 	.word	0x40011400
 8001c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4909      	ldr	r1, [pc, #36]	@ (8001c88 <HAL_GPIO_Init+0x304>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f ae8e 	bne.w	8001998 <HAL_GPIO_Init+0x14>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	372c      	adds	r7, #44	@ 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cc6:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fb4a 	bl	8000374 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b08b      	sub	sp, #44	@ 0x2c
 8001cf0:	af06      	add	r7, sp, #24
 8001cf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0f1      	b.n	8001ee2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f006 f8d6 	bl	8007ec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 f9f1 	bl	800410c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	687e      	ldr	r6, [r7, #4]
 8001d32:	466d      	mov	r5, sp
 8001d34:	f106 0410 	add.w	r4, r6, #16
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	1d33      	adds	r3, r6, #4
 8001d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f002 f9bb 	bl	80040c0 <USB_CoreInit>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0c2      	b.n	8001ee2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 f9ec 	bl	8004140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e040      	b.n	8001df0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3301      	adds	r3, #1
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3303      	adds	r3, #3
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3338      	adds	r3, #56	@ 0x38
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	333c      	adds	r3, #60	@ 0x3c
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	3340      	adds	r3, #64	@ 0x40
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	3301      	adds	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3b9      	bcc.n	8001d6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e044      	b.n	8001e8a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	3301      	adds	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3b5      	bcc.n	8001e00 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	687e      	ldr	r6, [r7, #4]
 8001e9c:	466d      	mov	r5, sp
 8001e9e:	f106 0410 	add.w	r4, r6, #16
 8001ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	602b      	str	r3, [r5, #0]
 8001eaa:	1d33      	adds	r3, r6, #4
 8001eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eae:	6838      	ldr	r0, [r7, #0]
 8001eb0:	f002 f952 	bl	8004158 <USB_DevInit>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00d      	b.n	8001ee2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fbd3 	bl	8006686 <USB_DevDisconnect>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_PCD_Start+0x16>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e016      	b.n	8001f2e <HAL_PCD_Start+0x44>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 f8e7 	bl	80040e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f12:	2101      	movs	r1, #1
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f006 fa24 	bl	8008362 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 fba7 	bl	8006672 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b088      	sub	sp, #32
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 fba9 	bl	800669a <USB_ReadInterrupts>
 8001f48:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fb04 	bl	8002562 <PCD_EP_ISR_Handler>

    return;
 8001f5a:	e119      	b.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d013      	beq.n	8001f8e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f006 f81b 	bl	8007fba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f84:	2100      	movs	r1, #0
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f905 	bl	8002196 <HAL_PCD_SetAddress>

    return;
 8001f8c:	e100      	b.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00c      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fb0:	e0ee      	b.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00c      	beq.n	8001fd6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001fd4:	e0dc      	b.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d027      	beq.n	8002030 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0208 	bic.w	r2, r2, #8
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f006 f80b 	bl	800802c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002028:	b292      	uxth	r2, r2
 800202a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800202e:	e0af      	b.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8083 	beq.w	8002142 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	77fb      	strb	r3, [r7, #31]
 8002040:	e010      	b.n	8002064 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	7ffb      	ldrb	r3, [r7, #31]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	b292      	uxth	r2, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	3320      	adds	r3, #32
 8002058:	443b      	add	r3, r7
 800205a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800205e:	7ffb      	ldrb	r3, [r7, #31]
 8002060:	3301      	adds	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]
 8002064:	7ffb      	ldrb	r3, [r7, #31]
 8002066:	2b07      	cmp	r3, #7
 8002068:	d9eb      	bls.n	8002042 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	b292      	uxth	r2, r2
 8002096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800209a:	bf00      	nop
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f6      	beq.n	800209c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c0:	b292      	uxth	r2, r2
 80020c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	77fb      	strb	r3, [r7, #31]
 80020ca:	e00f      	b.n	80020ec <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80020cc:	7ffb      	ldrb	r3, [r7, #31]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	4611      	mov	r1, r2
 80020d4:	7ffa      	ldrb	r2, [r7, #31]
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	440a      	add	r2, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	3320      	adds	r3, #32
 80020de:	443b      	add	r3, r7
 80020e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80020e4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	3301      	adds	r3, #1
 80020ea:	77fb      	strb	r3, [r7, #31]
 80020ec:	7ffb      	ldrb	r3, [r7, #31]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d9ec      	bls.n	80020cc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0208 	orr.w	r2, r2, #8
 8002104:	b292      	uxth	r2, r2
 8002106:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800211c:	b292      	uxth	r2, r2
 800211e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0204 	orr.w	r2, r2, #4
 8002134:	b292      	uxth	r2, r2
 8002136:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f005 ff5c 	bl	8007ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002140:	e026      	b.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00f      	beq.n	800216c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002154:	b29a      	uxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800215e:	b292      	uxth	r2, r2
 8002160:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f005 ff1a 	bl	8007f9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800216a:	e011      	b.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002188:	b292      	uxth	r2, r2
 800218a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800218e:	bf00      	nop
  }
}
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_SetAddress+0x1a>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e013      	b.n	80021d8 <HAL_PCD_SetAddress+0x42>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 fa3f 	bl	800664c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	70fb      	strb	r3, [r7, #3]
 80021f2:	460b      	mov	r3, r1
 80021f4:	803b      	strh	r3, [r7, #0]
 80021f6:	4613      	mov	r3, r2
 80021f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da0e      	bge.n	8002224 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	705a      	strb	r2, [r3, #1]
 8002222:	e00e      	b.n	8002242 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 0207 	and.w	r2, r3, #7
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800224e:	883a      	ldrh	r2, [r7, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	78ba      	ldrb	r2, [r7, #2]
 8002258:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800225a:	78bb      	ldrb	r3, [r7, #2]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d102      	bne.n	8002266 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_PCD_EP_Open+0x94>
 8002270:	2302      	movs	r3, #2
 8002272:	e00e      	b.n	8002292 <HAL_PCD_EP_Open+0xb2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	4618      	mov	r0, r3
 8002284:	f001 ff88 	bl	8004198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8002290:	7afb      	ldrb	r3, [r7, #11]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da0e      	bge.n	80022cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	705a      	strb	r2, [r3, #1]
 80022ca:	e00e      	b.n	80022ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 0207 	and.w	r2, r3, #7
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_PCD_EP_Close+0x6a>
 8002300:	2302      	movs	r3, #2
 8002302:	e00e      	b.n	8002322 <HAL_PCD_EP_Close+0x88>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fb00 	bl	8004918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	460b      	mov	r3, r1
 8002338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	f003 0207 	and.w	r2, r3, #7
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2200      	movs	r2, #0
 8002368:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800236a:	7afb      	ldrb	r3, [r7, #11]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	b2da      	uxtb	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6979      	ldr	r1, [r7, #20]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fcb7 	bl	8004cf0 <USB_EPStartXfer>

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	460b      	mov	r3, r1
 800239a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2201      	movs	r2, #1
 80023d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6979      	ldr	r1, [r7, #20]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fc80 	bl	8004cf0 <USB_EPStartXfer>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 0207 	and.w	r2, r3, #7
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d901      	bls.n	8002418 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e04c      	b.n	80024b2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241c:	2b00      	cmp	r3, #0
 800241e:	da0e      	bge.n	800243e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	705a      	strb	r2, [r3, #1]
 800243c:	e00c      	b.n	8002458 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_PCD_EP_SetStall+0x7e>
 8002474:	2302      	movs	r3, #2
 8002476:	e01c      	b.n	80024b2 <HAL_PCD_EP_SetStall+0xb8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 ffe3 	bl	8006452 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f004 f908 	bl	80066b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d901      	bls.n	80024d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e040      	b.n	800255a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	da0e      	bge.n	80024fe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	705a      	strb	r2, [r3, #1]
 80024fc:	e00e      	b.n	800251c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	f003 0207 	and.w	r2, r3, #7
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_PCD_EP_ClrStall+0x82>
 8002538:	2302      	movs	r3, #2
 800253a:	e00e      	b.n	800255a <HAL_PCD_EP_ClrStall+0xa0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	4618      	mov	r0, r3
 800254c:	f003 ffd1 	bl	80064f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b096      	sub	sp, #88	@ 0x58
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800256a:	e3be      	b.n	8002cea <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002574:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002578:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002586:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 8178 	bne.w	8002880 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d151      	bne.n	8002640 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80025a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ac:	81fb      	strh	r3, [r7, #14]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	89fb      	ldrh	r3, [r7, #14]
 80025b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3328      	adds	r3, #40	@ 0x28
 80025c4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	3302      	adds	r3, #2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	441a      	add	r2, r3
 80025fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f005 fcb1 	bl	8007f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 836a 	beq.w	8002cea <PCD_EP_ISR_Handler+0x788>
 8002616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 8365 	bne.w	8002cea <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800262c:	b2da      	uxtb	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800263e:	e354      	b.n	8002cea <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002646:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002652:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265a:	2b00      	cmp	r3, #0
 800265c:	d034      	beq.n	80026c8 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	3306      	adds	r3, #6
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002688:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8002694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002696:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800269c:	b29b      	uxth	r3, r3
 800269e:	f004 f85b 	bl	8006758 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026ae:	4013      	ands	r3, r2
 80026b0:	823b      	strh	r3, [r7, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	8a3a      	ldrh	r2, [r7, #16]
 80026b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026bc:	b292      	uxth	r2, r2
 80026be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f005 fc25 	bl	8007f10 <HAL_PCD_SetupStageCallback>
 80026c6:	e310      	b.n	8002cea <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f280 830c 	bge.w	8002cea <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026de:	4013      	ands	r3, r2
 80026e0:	83fb      	strh	r3, [r7, #30]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	8bfa      	ldrh	r2, [r7, #30]
 80026e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026ec:	b292      	uxth	r2, r2
 80026ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	3306      	adds	r3, #6
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <PCD_EP_ISR_Handler+0x1f6>
 8002724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002732:	6959      	ldr	r1, [r3, #20]
 8002734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002736:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800273c:	b29b      	uxth	r3, r3
 800273e:	f004 f80b 	bl	8006758 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	441a      	add	r2, r3
 800274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002750:	2100      	movs	r1, #0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f005 fbee 	bl	8007f34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002762:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 82bd 	bne.w	8002cea <PCD_EP_ISR_Handler+0x788>
 8002770:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002774:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002778:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800277c:	f000 82b5 	beq.w	8002cea <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80027b6:	d91d      	bls.n	80027f4 <PCD_EP_ISR_Handler+0x292>
 80027b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	647b      	str	r3, [r7, #68]	@ 0x44
 80027c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <PCD_EP_ISR_Handler+0x270>
 80027cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ce:	3b01      	subs	r3, #1
 80027d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027da:	b29b      	uxth	r3, r3
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	b29b      	uxth	r3, r3
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	e026      	b.n	8002842 <PCD_EP_ISR_Handler+0x2e0>
 80027f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <PCD_EP_ISR_Handler+0x2b0>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800280a:	b29a      	uxth	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	e017      	b.n	8002842 <PCD_EP_ISR_Handler+0x2e0>
 8002812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	647b      	str	r3, [r7, #68]	@ 0x44
 800281a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <PCD_EP_ISR_Handler+0x2ca>
 8002826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002828:	3301      	adds	r3, #1
 800282a:	647b      	str	r3, [r7, #68]	@ 0x44
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29a      	uxth	r2, r3
 8002832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002834:	b29b      	uxth	r3, r3
 8002836:	029b      	lsls	r3, r3, #10
 8002838:	b29b      	uxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	b29a      	uxth	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800284e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002852:	827b      	strh	r3, [r7, #18]
 8002854:	8a7b      	ldrh	r3, [r7, #18]
 8002856:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800285a:	827b      	strh	r3, [r7, #18]
 800285c:	8a7b      	ldrh	r3, [r7, #18]
 800285e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002862:	827b      	strh	r3, [r7, #18]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	8a7b      	ldrh	r3, [r7, #18]
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]
 800287e:	e234      	b.n	8002cea <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002894:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002898:	2b00      	cmp	r3, #0
 800289a:	f280 80fc 	bge.w	8002a96 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80028b4:	4013      	ands	r3, r2
 80028b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80028cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028d0:	b292      	uxth	r2, r2
 80028d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ec:	7b1b      	ldrb	r3, [r3, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d125      	bne.n	800293e <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	3306      	adds	r3, #6
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	4413      	add	r3, r2
 8002910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800291e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8092 	beq.w	8002a4c <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002932:	88da      	ldrh	r2, [r3, #6]
 8002934:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002938:	f003 ff0e 	bl	8006758 <USB_ReadPMA>
 800293c:	e086      	b.n	8002a4c <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800293e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002940:	78db      	ldrb	r3, [r3, #3]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d10a      	bne.n	800295c <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002946:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800294a:	461a      	mov	r2, r3
 800294c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f9d9 	bl	8002d06 <HAL_PCD_EP_DB_Receive>
 8002954:	4603      	mov	r3, r0
 8002956:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800295a:	e077      	b.n	8002a4c <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002976:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800298c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002998:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d024      	beq.n	8002a04 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	3302      	adds	r3, #2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80029e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d02e      	beq.n	8002a4c <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f4:	6959      	ldr	r1, [r3, #20]
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	891a      	ldrh	r2, [r3, #8]
 80029fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029fe:	f003 feab 	bl	8006758 <USB_ReadPMA>
 8002a02:	e023      	b.n	8002a4c <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	3306      	adds	r3, #6
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3e:	6959      	ldr	r1, [r3, #20]
 8002a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a42:	895a      	ldrh	r2, [r3, #10]
 8002a44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a48:	f003 fe86 	bl	8006758 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a54:	441a      	add	r2, r3
 8002a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a62:	441a      	add	r2, r3
 8002a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a66:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <PCD_EP_ISR_Handler+0x51a>
 8002a70:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d206      	bcs.n	8002a8a <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f005 fa56 	bl	8007f34 <HAL_PCD_DataOutStageCallback>
 8002a88:	e005      	b.n	8002a96 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 f92d 	bl	8004cf0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8123 	beq.w	8002cea <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8002aa4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	441a      	add	r2, r3
 8002ae4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 80a2 	bne.w	8002c42 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8002afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b06:	7b1b      	ldrb	r3, [r3, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8093 	beq.w	8002c34 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d046      	beq.n	8002ba8 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d126      	bne.n	8002b70 <PCD_EP_ISR_Handler+0x60e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	4413      	add	r3, r2
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	011a      	lsls	r2, r3, #4
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	4413      	add	r3, r2
 8002b44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b48:	623b      	str	r3, [r7, #32]
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	e061      	b.n	8002c34 <PCD_EP_ISR_Handler+0x6d2>
 8002b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d15d      	bne.n	8002c34 <PCD_EP_ISR_Handler+0x6d2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8c:	4413      	add	r3, r2
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	011a      	lsls	r2, r3, #4
 8002b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b98:	4413      	add	r3, r2
 8002b9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	e045      	b.n	8002c34 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d126      	bne.n	8002c04 <PCD_EP_ISR_Handler+0x6a2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bca:	4413      	add	r3, r2
 8002bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	011a      	lsls	r2, r3, #4
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	e017      	b.n	8002c34 <PCD_EP_ISR_Handler+0x6d2>
 8002c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d113      	bne.n	8002c34 <PCD_EP_ISR_Handler+0x6d2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1a:	4413      	add	r3, r2
 8002c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	011a      	lsls	r2, r3, #4
 8002c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c26:	4413      	add	r3, r2
 8002c28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c30:	2200      	movs	r2, #0
 8002c32:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f005 f995 	bl	8007f6a <HAL_PCD_DataInStageCallback>
 8002c40:	e053      	b.n	8002cea <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d146      	bne.n	8002cdc <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	3302      	adds	r3, #2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c76:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d907      	bls.n	8002c96 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c8e:	1ad2      	subs	r2, r2, r3
 8002c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c92:	619a      	str	r2, [r3, #24]
 8002c94:	e002      	b.n	8002c9c <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f005 f95d 	bl	8007f6a <HAL_PCD_DataInStageCallback>
 8002cb0:	e01b      	b.n	8002cea <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cba:	441a      	add	r2, r3
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002cc8:	441a      	add	r2, r3
 8002cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ccc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 f80b 	bl	8004cf0 <USB_EPStartXfer>
 8002cda:	e006      	b.n	8002cea <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002cdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f91b 	bl	8002f20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f6ff ac38 	blt.w	800256c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3758      	adds	r7, #88	@ 0x58
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b088      	sub	sp, #32
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d07e      	beq.n	8002e1c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	3302      	adds	r3, #2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	8b7b      	ldrh	r3, [r7, #26]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d306      	bcc.n	8002d60 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	8b7b      	ldrh	r3, [r7, #26]
 8002d58:	1ad2      	subs	r2, r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	619a      	str	r2, [r3, #24]
 8002d5e:	e002      	b.n	8002d66 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d123      	bne.n	8002db6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d88:	833b      	strh	r3, [r7, #24]
 8002d8a:	8b3b      	ldrh	r3, [r7, #24]
 8002d8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d90:	833b      	strh	r3, [r7, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	441a      	add	r2, r3
 8002da0:	8b3b      	ldrh	r3, [r7, #24]
 8002da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01f      	beq.n	8002e00 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	82fb      	strh	r3, [r7, #22]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	8afb      	ldrh	r3, [r7, #22]
 8002dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002df8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e00:	8b7b      	ldrh	r3, [r7, #26]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6959      	ldr	r1, [r3, #20]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	891a      	ldrh	r2, [r3, #8]
 8002e14:	8b7b      	ldrh	r3, [r7, #26]
 8002e16:	f003 fc9f 	bl	8006758 <USB_ReadPMA>
 8002e1a:	e07c      	b.n	8002f16 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3306      	adds	r3, #6
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	8b7b      	ldrh	r3, [r7, #26]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d306      	bcc.n	8002e5e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	8b7b      	ldrh	r3, [r7, #26]
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	619a      	str	r2, [r3, #24]
 8002e5c:	e002      	b.n	8002e64 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d123      	bne.n	8002eb4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e86:	83fb      	strh	r3, [r7, #30]
 8002e88:	8bfb      	ldrh	r3, [r7, #30]
 8002e8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e8e:	83fb      	strh	r3, [r7, #30]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	8bfb      	ldrh	r3, [r7, #30]
 8002ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d11f      	bne.n	8002efe <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed8:	83bb      	strh	r3, [r7, #28]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	8bbb      	ldrh	r3, [r7, #28]
 8002eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002efe:	8b7b      	ldrh	r3, [r7, #26]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6959      	ldr	r1, [r3, #20]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	895a      	ldrh	r2, [r3, #10]
 8002f10:	8b7b      	ldrh	r3, [r7, #26]
 8002f12:	f003 fc21 	bl	8006758 <USB_ReadPMA>
    }
  }

  return count;
 8002f16:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b0a4      	sub	sp, #144	@ 0x90
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 81dd 	beq.w	80032f4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f62:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d907      	bls.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	619a      	str	r2, [r3, #24]
 8002f80:	e002      	b.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 80b9 	bne.w	8003104 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	785b      	ldrb	r3, [r3, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d126      	bne.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fae:	4413      	add	r3, r2
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	011a      	lsls	r2, r3, #4
 8002fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fba:	4413      	add	r3, r2
 8002fbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe4:	801a      	strh	r2, [r3, #0]
 8002fe6:	e01a      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	785b      	ldrb	r3, [r3, #1]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d116      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003004:	4413      	add	r3, r2
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	011a      	lsls	r2, r3, #4
 800300e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003010:	4413      	add	r3, r2
 8003012:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	2200      	movs	r2, #0
 800301c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d126      	bne.n	800307a <HAL_PCD_EP_DB_Transmit+0x15a>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	011a      	lsls	r2, r3, #4
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800305e:	b29a      	uxth	r2, r3
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800306e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003072:	b29a      	uxth	r2, r3
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	801a      	strh	r2, [r3, #0]
 8003078:	e017      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0x18a>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d113      	bne.n	80030aa <HAL_PCD_EP_DB_Transmit+0x18a>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	4413      	add	r3, r2
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	011a      	lsls	r2, r3, #4
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	4413      	add	r3, r2
 800309e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2200      	movs	r2, #0
 80030a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	4619      	mov	r1, r3
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f004 ff5a 	bl	8007f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 82fc 	beq.w	80036ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030dc:	82fb      	strh	r3, [r7, #22]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	441a      	add	r2, r3
 80030ec:	8afb      	ldrh	r3, [r7, #22]
 80030ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fe:	b29b      	uxth	r3, r3
 8003100:	8013      	strh	r3, [r2, #0]
 8003102:	e2da      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d021      	beq.n	8003152 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003128:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800313e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003146:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800314a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314e:	b29b      	uxth	r3, r3
 8003150:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003158:	2b01      	cmp	r3, #1
 800315a:	f040 82ae 	bne.w	80036ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003166:	441a      	add	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003174:	441a      	add	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6a1a      	ldr	r2, [r3, #32]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	429a      	cmp	r2, r3
 8003184:	d30b      	bcc.n	800319e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003196:	1ad2      	subs	r2, r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	621a      	str	r2, [r3, #32]
 800319c:	e017      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d108      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80031a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80031b6:	e00a      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2200      	movs	r2, #0
 80031cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d165      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x382>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ea:	4413      	add	r3, r2
 80031ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	011a      	lsls	r2, r3, #4
 80031f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f6:	4413      	add	r3, r2
 80031f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003208:	b29a      	uxth	r2, r3
 800320a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003212:	2b3e      	cmp	r3, #62	@ 0x3e
 8003214:	d91d      	bls.n	8003252 <HAL_PCD_EP_DB_Transmit+0x332>
 8003216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800321e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_PCD_EP_DB_Transmit+0x310>
 800322a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800322c:	3b01      	subs	r3, #1
 800322e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29a      	uxth	r2, r3
 8003236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003238:	b29b      	uxth	r3, r3
 800323a:	029b      	lsls	r3, r3, #10
 800323c:	b29b      	uxth	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b29b      	uxth	r3, r3
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29a      	uxth	r2, r3
 800324c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	e044      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <HAL_PCD_EP_DB_Transmit+0x350>
 800325a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003268:	b29a      	uxth	r2, r3
 800326a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	e035      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_PCD_EP_DB_Transmit+0x36a>
 8003284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003286:	3301      	adds	r3, #1
 8003288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29a      	uxth	r2, r3
 8003290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003292:	b29b      	uxth	r3, r3
 8003294:	029b      	lsls	r3, r3, #10
 8003296:	b29b      	uxth	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	b29a      	uxth	r2, r3
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	801a      	strh	r2, [r3, #0]
 80032a0:	e01c      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d118      	bne.n	80032dc <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032be:	4413      	add	r3, r2
 80032c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	011a      	lsls	r2, r3, #4
 80032c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ca:	4413      	add	r3, r2
 80032cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80032d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032da:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6959      	ldr	r1, [r3, #20]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	891a      	ldrh	r2, [r3, #8]
 80032e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f003 f9ee 	bl	80066ce <USB_WritePMA>
 80032f2:	e1e2      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	3306      	adds	r3, #6
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003328:	429a      	cmp	r2, r3
 800332a:	d307      	bcc.n	800333c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003334:	1ad2      	subs	r2, r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	619a      	str	r2, [r3, #24]
 800333a:	e002      	b.n	8003342 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 80c0 	bne.w	80034cc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d126      	bne.n	80033a2 <HAL_PCD_EP_DB_Transmit+0x482>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003368:	4413      	add	r3, r2
 800336a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	011a      	lsls	r2, r3, #4
 8003372:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003374:	4413      	add	r3, r2
 8003376:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800337a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800337c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	b29a      	uxth	r2, r3
 8003388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339a:	b29a      	uxth	r2, r3
 800339c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800339e:	801a      	strh	r2, [r3, #0]
 80033a0:	e01a      	b.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	785b      	ldrb	r3, [r3, #1]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d116      	bne.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033be:	4413      	add	r3, r2
 80033c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	011a      	lsls	r2, r3, #4
 80033c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033ca:	4413      	add	r3, r2
 80033cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80033d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d4:	2200      	movs	r2, #0
 80033d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	785b      	ldrb	r3, [r3, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d12b      	bne.n	800343e <HAL_PCD_EP_DB_Transmit+0x51e>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fa:	4413      	add	r3, r2
 80033fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	011a      	lsls	r2, r3, #4
 8003404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003406:	4413      	add	r3, r2
 8003408:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800340c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003410:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341c:	b29a      	uxth	r2, r3
 800341e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003434:	b29a      	uxth	r2, r3
 8003436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800343a:	801a      	strh	r2, [r3, #0]
 800343c:	e017      	b.n	800346e <HAL_PCD_EP_DB_Transmit+0x54e>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d113      	bne.n	800346e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003454:	4413      	add	r3, r2
 8003456:	677b      	str	r3, [r7, #116]	@ 0x74
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	011a      	lsls	r2, r3, #4
 800345e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003460:	4413      	add	r3, r2
 8003462:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003466:	673b      	str	r3, [r7, #112]	@ 0x70
 8003468:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800346a:	2200      	movs	r2, #0
 800346c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	4619      	mov	r1, r3
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f004 fd78 	bl	8007f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 811a 	bne.w	80036ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800349c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	441a      	add	r2, r3
 80034b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80034b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	8013      	strh	r3, [r2, #0]
 80034ca:	e0f6      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d121      	bne.n	800351a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800350a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800350e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003516:	b29b      	uxth	r3, r3
 8003518:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 80ca 	bne.w	80036ba <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800352e:	441a      	add	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800353c:	441a      	add	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6a1a      	ldr	r2, [r3, #32]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	429a      	cmp	r2, r3
 800354c:	d30b      	bcc.n	8003566 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800355e:	1ad2      	subs	r2, r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	621a      	str	r2, [r3, #32]
 8003564:	e017      	b.n	8003596 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800356e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003572:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800357e:	e00a      	b.n	8003596 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2200      	movs	r2, #0
 800358c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	657b      	str	r3, [r7, #84]	@ 0x54
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	785b      	ldrb	r3, [r3, #1]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d165      	bne.n	8003670 <HAL_PCD_EP_DB_Transmit+0x750>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035b8:	4413      	add	r3, r2
 80035ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	011a      	lsls	r2, r3, #4
 80035c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035c4:	4413      	add	r3, r2
 80035c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80035e2:	d91d      	bls.n	8003620 <HAL_PCD_EP_DB_Transmit+0x700>
 80035e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_PCD_EP_DB_Transmit+0x6de>
 80035f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035fa:	3b01      	subs	r3, #1
 80035fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29a      	uxth	r2, r3
 8003604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003606:	b29b      	uxth	r3, r3
 8003608:	029b      	lsls	r3, r3, #10
 800360a:	b29b      	uxth	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003618:	b29a      	uxth	r2, r3
 800361a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800361c:	801a      	strh	r2, [r3, #0]
 800361e:	e041      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003620:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003636:	b29a      	uxth	r2, r3
 8003638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800363a:	801a      	strh	r2, [r3, #0]
 800363c:	e032      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x784>
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_PCD_EP_DB_Transmit+0x738>
 8003652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003654:	3301      	adds	r3, #1
 8003656:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	b29a      	uxth	r2, r3
 800365e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003660:	b29b      	uxth	r3, r3
 8003662:	029b      	lsls	r3, r3, #10
 8003664:	b29b      	uxth	r3, r3
 8003666:	4313      	orrs	r3, r2
 8003668:	b29a      	uxth	r2, r3
 800366a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	e019      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d115      	bne.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003680:	b29b      	uxth	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003686:	4413      	add	r3, r2
 8003688:	657b      	str	r3, [r7, #84]	@ 0x54
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	011a      	lsls	r2, r3, #4
 8003690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003692:	4413      	add	r3, r2
 8003694:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003698:	653b      	str	r3, [r7, #80]	@ 0x50
 800369a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800369e:	b29a      	uxth	r2, r3
 80036a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6959      	ldr	r1, [r3, #20]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	895a      	ldrh	r2, [r3, #10]
 80036b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f003 f80a 	bl	80066ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d4:	82bb      	strh	r3, [r7, #20]
 80036d6:	8abb      	ldrh	r3, [r7, #20]
 80036d8:	f083 0310 	eor.w	r3, r3, #16
 80036dc:	82bb      	strh	r3, [r7, #20]
 80036de:	8abb      	ldrh	r3, [r7, #20]
 80036e0:	f083 0320 	eor.w	r3, r3, #32
 80036e4:	82bb      	strh	r3, [r7, #20]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	441a      	add	r2, r3
 80036f4:	8abb      	ldrh	r3, [r7, #20]
 80036f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003706:	b29b      	uxth	r3, r3
 8003708:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3790      	adds	r7, #144	@ 0x90
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	4613      	mov	r3, r2
 8003724:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003726:	897b      	ldrh	r3, [r7, #10]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	e009      	b.n	800375e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374a:	897a      	ldrh	r2, [r7, #10]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800375e:	893b      	ldrh	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	b29a      	uxth	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	80da      	strh	r2, [r3, #6]
 8003772:	e00b      	b.n	800378c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2201      	movs	r2, #1
 8003778:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	b29a      	uxth	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	b29a      	uxth	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e272      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8087 	beq.w	80038c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b8:	4b92      	ldr	r3, [pc, #584]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d00c      	beq.n	80037de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d112      	bne.n	80037f6 <HAL_RCC_OscConfig+0x5e>
 80037d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037dc:	d10b      	bne.n	80037f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037de:	4b89      	ldr	r3, [pc, #548]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d06c      	beq.n	80038c4 <HAL_RCC_OscConfig+0x12c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d168      	bne.n	80038c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e24c      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x76>
 8003800:	4b80      	ldr	r3, [pc, #512]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7f      	ldr	r2, [pc, #508]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	e02e      	b.n	800386c <HAL_RCC_OscConfig+0xd4>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0x98>
 8003816:	4b7b      	ldr	r3, [pc, #492]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a7a      	ldr	r2, [pc, #488]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 800381c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b78      	ldr	r3, [pc, #480]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a77      	ldr	r2, [pc, #476]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003828:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e01d      	b.n	800386c <HAL_RCC_OscConfig+0xd4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0xbc>
 800383a:	4b72      	ldr	r3, [pc, #456]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a71      	ldr	r2, [pc, #452]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b6f      	ldr	r3, [pc, #444]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6e      	ldr	r2, [pc, #440]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xd4>
 8003854:	4b6b      	ldr	r3, [pc, #428]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6a      	ldr	r2, [pc, #424]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b68      	ldr	r3, [pc, #416]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a67      	ldr	r2, [pc, #412]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800386a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fd f990 	bl	8000b98 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fd f98c 	bl	8000b98 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e200      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0xe4>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fd f97c 	bl	8000b98 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fd f978 	bl	8000b98 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1ec      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	4b53      	ldr	r3, [pc, #332]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x10c>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d063      	beq.n	800399a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038de:	4b49      	ldr	r3, [pc, #292]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d11c      	bne.n	8003924 <HAL_RCC_OscConfig+0x18c>
 80038ea:	4b46      	ldr	r3, [pc, #280]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d116      	bne.n	8003924 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	4b43      	ldr	r3, [pc, #268]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_RCC_OscConfig+0x176>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e1c0      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4939      	ldr	r1, [pc, #228]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	e03a      	b.n	800399a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392c:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fd f931 	bl	8000b98 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393a:	f7fd f92d 	bl	8000b98 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e1a1      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b2a      	ldr	r3, [pc, #168]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4927      	ldr	r1, [pc, #156]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
 800396c:	e015      	b.n	800399a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396e:	4b26      	ldr	r3, [pc, #152]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd f910 	bl	8000b98 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397c:	f7fd f90c 	bl	8000b98 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e180      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d03a      	beq.n	8003a1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d019      	beq.n	80039e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ae:	4b17      	ldr	r3, [pc, #92]	@ (8003a0c <HAL_RCC_OscConfig+0x274>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fd f8f0 	bl	8000b98 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fd f8ec 	bl	8000b98 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e160      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003a04 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039da:	2001      	movs	r0, #1
 80039dc:	f000 fa9c 	bl	8003f18 <RCC_Delay>
 80039e0:	e01c      	b.n	8003a1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e2:	4b0a      	ldr	r3, [pc, #40]	@ (8003a0c <HAL_RCC_OscConfig+0x274>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fd f8d6 	bl	8000b98 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ee:	e00f      	b.n	8003a10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fd f8d2 	bl	8000b98 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d908      	bls.n	8003a10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e146      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	42420000 	.word	0x42420000
 8003a0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	4b92      	ldr	r3, [pc, #584]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e9      	bne.n	80039f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80a6 	beq.w	8003b76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10d      	bne.n	8003a56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b88      	ldr	r3, [pc, #544]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4a87      	ldr	r2, [pc, #540]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a44:	61d3      	str	r3, [r2, #28]
 8003a46:	4b85      	ldr	r3, [pc, #532]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	4b82      	ldr	r3, [pc, #520]	@ (8003c60 <HAL_RCC_OscConfig+0x4c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d118      	bne.n	8003a94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a62:	4b7f      	ldr	r3, [pc, #508]	@ (8003c60 <HAL_RCC_OscConfig+0x4c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7e      	ldr	r2, [pc, #504]	@ (8003c60 <HAL_RCC_OscConfig+0x4c8>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd f893 	bl	8000b98 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fd f88f 	bl	8000b98 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	@ 0x64
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e103      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	4b75      	ldr	r3, [pc, #468]	@ (8003c60 <HAL_RCC_OscConfig+0x4c8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d106      	bne.n	8003aaa <HAL_RCC_OscConfig+0x312>
 8003a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6213      	str	r3, [r2, #32]
 8003aa8:	e02d      	b.n	8003b06 <HAL_RCC_OscConfig+0x36e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x334>
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a69      	ldr	r2, [pc, #420]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6213      	str	r3, [r2, #32]
 8003abe:	4b67      	ldr	r3, [pc, #412]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a66      	ldr	r2, [pc, #408]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	6213      	str	r3, [r2, #32]
 8003aca:	e01c      	b.n	8003b06 <HAL_RCC_OscConfig+0x36e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCC_OscConfig+0x356>
 8003ad4:	4b61      	ldr	r3, [pc, #388]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4a60      	ldr	r2, [pc, #384]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	6213      	str	r3, [r2, #32]
 8003ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4a5d      	ldr	r2, [pc, #372]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6213      	str	r3, [r2, #32]
 8003aec:	e00b      	b.n	8003b06 <HAL_RCC_OscConfig+0x36e>
 8003aee:	4b5b      	ldr	r3, [pc, #364]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4a5a      	ldr	r2, [pc, #360]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	6213      	str	r3, [r2, #32]
 8003afa:	4b58      	ldr	r3, [pc, #352]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a57      	ldr	r2, [pc, #348]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d015      	beq.n	8003b3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0e:	f7fd f843 	bl	8000b98 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fd f83f 	bl	8000b98 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e0b1      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ee      	beq.n	8003b16 <HAL_RCC_OscConfig+0x37e>
 8003b38:	e014      	b.n	8003b64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fd f82d 	bl	8000b98 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7fd f829 	bl	8000b98 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e09b      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b58:	4b40      	ldr	r3, [pc, #256]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1ee      	bne.n	8003b42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d105      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8087 	beq.w	8003c8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b80:	4b36      	ldr	r3, [pc, #216]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d061      	beq.n	8003c50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d146      	bne.n	8003c22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b94:	4b33      	ldr	r3, [pc, #204]	@ (8003c64 <HAL_RCC_OscConfig+0x4cc>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fc fffd 	bl	8000b98 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fc fff9 	bl	8000b98 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e06d      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb4:	4b29      	ldr	r3, [pc, #164]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f0      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc8:	d108      	bne.n	8003bdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bca:	4b24      	ldr	r3, [pc, #144]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	4921      	ldr	r1, [pc, #132]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a19      	ldr	r1, [r3, #32]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	430b      	orrs	r3, r1
 8003bee:	491b      	ldr	r1, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <HAL_RCC_OscConfig+0x4cc>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fc ffcd 	bl	8000b98 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fc ffc9 	bl	8000b98 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e03d      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c14:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x46a>
 8003c20:	e035      	b.n	8003c8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <HAL_RCC_OscConfig+0x4cc>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fc ffb6 	bl	8000b98 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fc ffb2 	bl	8000b98 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e026      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x498>
 8003c4e:	e01e      	b.n	8003c8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e019      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c68:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <HAL_RCC_OscConfig+0x500>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000

08003c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0d0      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d910      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b67      	ldr	r3, [pc, #412]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	4965      	ldr	r1, [pc, #404]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b63      	ldr	r3, [pc, #396]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0b8      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf8:	4b59      	ldr	r3, [pc, #356]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a58      	ldr	r2, [pc, #352]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d10:	4b53      	ldr	r3, [pc, #332]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a52      	ldr	r2, [pc, #328]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1c:	4b50      	ldr	r3, [pc, #320]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	494d      	ldr	r1, [pc, #308]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d040      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e07f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b41      	ldr	r3, [pc, #260]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e073      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e06b      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b39      	ldr	r3, [pc, #228]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4936      	ldr	r1, [pc, #216]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fc ff04 	bl	8000b98 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fc ff00 	bl	8000b98 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e053      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d210      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b24      	ldr	r3, [pc, #144]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 0207 	bic.w	r2, r3, #7
 8003dd2:	4922      	ldr	r1, [pc, #136]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b20      	ldr	r3, [pc, #128]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e032      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df8:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4916      	ldr	r1, [pc, #88]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e16:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	490e      	ldr	r1, [pc, #56]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e2a:	f000 f821 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	490a      	ldr	r1, [pc, #40]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	5ccb      	ldrb	r3, [r1, r3]
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	4a09      	ldr	r2, [pc, #36]	@ (8003e68 <HAL_RCC_ClockConfig+0x1cc>)
 8003e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e46:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <HAL_RCC_ClockConfig+0x1d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc fe62 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40021000 	.word	0x40021000
 8003e64:	08008480 	.word	0x08008480
 8003e68:	20000004 	.word	0x20000004
 8003e6c:	20000008 	.word	0x20000008

08003e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x36>
 8003e9e:	e027      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ea2:	613b      	str	r3, [r7, #16]
      break;
 8003ea4:	e027      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	0c9b      	lsrs	r3, r3, #18
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ebe:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	0c5b      	lsrs	r3, r3, #17
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	4a11      	ldr	r2, [pc, #68]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed2:	fb03 f202 	mul.w	r2, r3, r2
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e004      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	613b      	str	r3, [r7, #16]
      break;
 8003eee:	e002      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ef2:	613b      	str	r3, [r7, #16]
      break;
 8003ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef6:	693b      	ldr	r3, [r7, #16]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	007a1200 	.word	0x007a1200
 8003f0c:	08008490 	.word	0x08008490
 8003f10:	080084a0 	.word	0x080084a0
 8003f14:	003d0900 	.word	0x003d0900

08003f18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f20:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <RCC_Delay+0x34>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	@ (8003f50 <RCC_Delay+0x38>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a5b      	lsrs	r3, r3, #9
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f34:	bf00      	nop
  }
  while (Delay --);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	60fa      	str	r2, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f9      	bne.n	8003f34 <RCC_Delay+0x1c>
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000004 	.word	0x20000004
 8003f50:	10624dd3 	.word	0x10624dd3

08003f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d07d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f74:	4b4f      	ldr	r3, [pc, #316]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4b4c      	ldr	r3, [pc, #304]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4a4b      	ldr	r2, [pc, #300]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f8a:	61d3      	str	r3, [r2, #28]
 8003f8c:	4b49      	ldr	r3, [pc, #292]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b46      	ldr	r3, [pc, #280]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d118      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa8:	4b43      	ldr	r3, [pc, #268]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a42      	ldr	r2, [pc, #264]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb4:	f7fc fdf0 	bl	8000b98 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fba:	e008      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fc fdec 	bl	8000b98 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	@ 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e06d      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b3a      	ldr	r3, [pc, #232]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fda:	4b36      	ldr	r3, [pc, #216]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02e      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d027      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004000:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004002:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004008:	4b2c      	ldr	r3, [pc, #176]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800400e:	4a29      	ldr	r2, [pc, #164]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d014      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fc fdbb 	bl	8000b98 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	e00a      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fc fdb7 	bl	8000b98 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e036      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	4b1d      	ldr	r3, [pc, #116]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0ee      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004048:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4917      	ldr	r1, [pc, #92]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	4313      	orrs	r3, r2
 8004058:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800405a:	7dfb      	ldrb	r3, [r7, #23]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004060:	4b14      	ldr	r3, [pc, #80]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004078:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	490b      	ldr	r1, [pc, #44]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004096:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4904      	ldr	r1, [pc, #16]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40007000 	.word	0x40007000
 80040bc:	42420440 	.word	0x42420440

080040c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040c0:	b084      	sub	sp, #16
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	f107 0014 	add.w	r0, r7, #20
 80040ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	b004      	add	sp, #16
 80040de:	4770      	bx	lr

080040e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040f0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80040f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004114:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004118:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	b29b      	uxth	r3, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	b29b      	uxth	r3, r3
 800412a:	4013      	ands	r3, r2
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004158:	b084      	sub	sp, #16
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	f107 0014 	add.w	r0, r7, #20
 8004166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	b004      	add	sp, #16
 8004196:	4770      	bx	lr

08004198 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004198:	b480      	push	{r7}
 800419a:	b09d      	sub	sp, #116	@ 0x74
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	78db      	ldrb	r3, [r3, #3]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d81f      	bhi.n	800420a <USB_ActivateEndpoint+0x72>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <USB_ActivateEndpoint+0x38>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004213 	.word	0x08004213
 80041dc:	080041ef 	.word	0x080041ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80041ec:	e012      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041f2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80041f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80041fa:	e00b      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004204:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004208:	e004      	b.n	8004214 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004210:	e000      	b.n	8004214 <USB_ActivateEndpoint+0x7c>
      break;
 8004212:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424c:	b29b      	uxth	r3, r3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800426a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800426e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004276:	b29b      	uxth	r3, r3
 8004278:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	7b1b      	ldrb	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 8178 	bne.w	8004574 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8084 	beq.w	8004396 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	88db      	ldrh	r3, [r3, #6]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	827b      	strh	r3, [r7, #18]
 80042d0:	8a7b      	ldrh	r3, [r7, #18]
 80042d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01b      	beq.n	8004312 <USB_ActivateEndpoint+0x17a>
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f0:	823b      	strh	r3, [r7, #16]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	8a3b      	ldrh	r3, [r7, #16]
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800430a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d020      	beq.n	800435c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004330:	81bb      	strh	r3, [r7, #12]
 8004332:	89bb      	ldrh	r3, [r7, #12]
 8004334:	f083 0320 	eor.w	r3, r3, #32
 8004338:	81bb      	strh	r3, [r7, #12]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	89bb      	ldrh	r3, [r7, #12]
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
 800435a:	e2d5      	b.n	8004908 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800436e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004372:	81fb      	strh	r3, [r7, #14]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004384:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004388:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800438c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]
 8004394:	e2b8      	b.n	8004908 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	4413      	add	r3, r2
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	011a      	lsls	r2, r3, #4
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	88db      	ldrh	r3, [r3, #6]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c8:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	4413      	add	r3, r2
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	011a      	lsls	r2, r3, #4
 80043e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b3e      	cmp	r3, #62	@ 0x3e
 8004404:	d91d      	bls.n	8004442 <USB_ActivateEndpoint+0x2aa>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <USB_ActivateEndpoint+0x288>
 800441a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441c:	3b01      	subs	r3, #1
 800441e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29a      	uxth	r2, r3
 8004426:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004428:	b29b      	uxth	r3, r3
 800442a:	029b      	lsls	r3, r3, #10
 800442c:	b29b      	uxth	r3, r3
 800442e:	4313      	orrs	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443a:	b29a      	uxth	r2, r3
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e026      	b.n	8004490 <USB_ActivateEndpoint+0x2f8>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <USB_ActivateEndpoint+0x2c8>
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004458:	b29a      	uxth	r2, r3
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e017      	b.n	8004490 <USB_ActivateEndpoint+0x2f8>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <USB_ActivateEndpoint+0x2e2>
 8004474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004476:	3301      	adds	r3, #1
 8004478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29a      	uxth	r2, r3
 8004480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004482:	b29b      	uxth	r3, r3
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	b29b      	uxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b29a      	uxth	r2, r3
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800449e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <USB_ActivateEndpoint+0x348>
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	843b      	strh	r3, [r7, #32]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	441a      	add	r2, r3
 80044ca:	8c3b      	ldrh	r3, [r7, #32]
 80044cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d124      	bne.n	8004532 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	83bb      	strh	r3, [r7, #28]
 8004500:	8bbb      	ldrh	r3, [r7, #28]
 8004502:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004506:	83bb      	strh	r3, [r7, #28]
 8004508:	8bbb      	ldrh	r3, [r7, #28]
 800450a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800450e:	83bb      	strh	r3, [r7, #28]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	8bbb      	ldrh	r3, [r7, #28]
 800451c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452c:	b29b      	uxth	r3, r3
 800452e:	8013      	strh	r3, [r2, #0]
 8004530:	e1ea      	b.n	8004908 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004548:	83fb      	strh	r3, [r7, #30]
 800454a:	8bfb      	ldrh	r3, [r7, #30]
 800454c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004550:	83fb      	strh	r3, [r7, #30]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	8bfb      	ldrh	r3, [r7, #30]
 800455e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]
 8004572:	e1c9      	b.n	8004908 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	78db      	ldrb	r3, [r3, #3]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d11e      	bne.n	80045ba <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80045a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80045b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]
 80045b8:	e01d      	b.n	80045f6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80045cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004606:	4413      	add	r3, r2
 8004608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	011a      	lsls	r2, r3, #4
 8004610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004612:	4413      	add	r3, r2
 8004614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	891b      	ldrh	r3, [r3, #8]
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	657b      	str	r3, [r7, #84]	@ 0x54
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004634:	b29b      	uxth	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463a:	4413      	add	r3, r2
 800463c:	657b      	str	r3, [r7, #84]	@ 0x54
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	011a      	lsls	r2, r3, #4
 8004644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004646:	4413      	add	r3, r2
 8004648:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800464c:	653b      	str	r3, [r7, #80]	@ 0x50
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	895b      	ldrh	r3, [r3, #10]
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800465c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 8093 	bne.w	800478e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004678:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800467c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <USB_ActivateEndpoint+0x524>
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80046ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <USB_ActivateEndpoint+0x574>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004704:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800471e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004722:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004724:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004726:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800472a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800472c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800472e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004732:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800476a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
 800478c:	e0bc      	b.n	8004908 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800479e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01d      	beq.n	80047e6 <USB_ActivateEndpoint+0x64e>
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80047f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01d      	beq.n	800483e <USB_ActivateEndpoint+0x6a6>
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004818:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800482a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004836:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800483a:	b29b      	uxth	r3, r3
 800483c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	78db      	ldrb	r3, [r3, #3]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d024      	beq.n	8004890 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800485c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004860:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004864:	f083 0320 	eor.w	r3, r3, #32
 8004868:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004908:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800490c:	4618      	mov	r0, r3
 800490e:	3774      	adds	r7, #116	@ 0x74
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004918:	b480      	push	{r7}
 800491a:	b08d      	sub	sp, #52	@ 0x34
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	7b1b      	ldrb	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 808e 	bne.w	8004a48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d044      	beq.n	80049be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	81bb      	strh	r3, [r7, #12]
 8004942:	89bb      	ldrh	r3, [r7, #12]
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <USB_DeactivateEndpoint+0x6c>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	817b      	strh	r3, [r7, #10]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800497c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004980:	b29b      	uxth	r3, r3
 8004982:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800499a:	813b      	strh	r3, [r7, #8]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	893b      	ldrh	r3, [r7, #8]
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]
 80049bc:	e192      	b.n	8004ce4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	827b      	strh	r3, [r7, #18]
 80049cc:	8a7b      	ldrh	r3, [r7, #18]
 80049ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01b      	beq.n	8004a0e <USB_DeactivateEndpoint+0xf6>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ec:	823b      	strh	r3, [r7, #16]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8a3b      	ldrh	r3, [r7, #16]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a24:	81fb      	strh	r3, [r7, #14]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
 8004a46:	e14d      	b.n	8004ce4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 80a5 	bne.w	8004b9c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	843b      	strh	r3, [r7, #32]
 8004a60:	8c3b      	ldrh	r3, [r7, #32]
 8004a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01b      	beq.n	8004aa2 <USB_DeactivateEndpoint+0x18a>
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a80:	83fb      	strh	r3, [r7, #30]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	8bfb      	ldrh	r3, [r7, #30]
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	83bb      	strh	r3, [r7, #28]
 8004ab0:	8bbb      	ldrh	r3, [r7, #28]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01b      	beq.n	8004af2 <USB_DeactivateEndpoint+0x1da>
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad0:	837b      	strh	r3, [r7, #26]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8b7b      	ldrh	r3, [r7, #26]
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b08:	833b      	strh	r3, [r7, #24]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	8b3b      	ldrh	r3, [r7, #24]
 8004b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b40:	82fb      	strh	r3, [r7, #22]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b78:	82bb      	strh	r3, [r7, #20]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	8abb      	ldrh	r3, [r7, #20]
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
 8004b9a:	e0a3      	b.n	8004ce4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004baa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <USB_DeactivateEndpoint+0x2d4>
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004bfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <USB_DeactivateEndpoint+0x324>
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c52:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3734      	adds	r7, #52	@ 0x34
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0c2      	sub	sp, #264	@ 0x108
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cfe:	6018      	str	r0, [r3, #0]
 8004d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d08:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	f040 86b7 	bne.w	8005a8a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d908      	bls.n	8004d4a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d48:	e007      	b.n	8004d5a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	7b1b      	ldrb	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d13a      	bne.n	8004de0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6959      	ldr	r1, [r3, #20]
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	88da      	ldrh	r2, [r3, #6]
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d90:	6800      	ldr	r0, [r0, #0]
 8004d92:	f001 fc9c 	bl	80066ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	f000 be1f 	b.w	8005a1e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	f040 8462 	bne.w	80056b6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	f240 83df 	bls.w	80055ce <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e36:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e60:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7c:	1ad2      	subs	r2, r2, r3
 8004e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 81c7 	beq.w	8005240 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d177      	bne.n	8004fbe <USB_EPStartXfer+0x2ce>
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	4413      	add	r3, r2
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	4413      	add	r3, r2
 8004f04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f20:	d921      	bls.n	8004f66 <USB_EPStartXfer+0x276>
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <USB_EPStartXfer+0x252>
 8004f38:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	029b      	lsls	r3, r3, #10
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	801a      	strh	r2, [r3, #0]
 8004f64:	e050      	b.n	8005008 <USB_EPStartXfer+0x318>
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <USB_EPStartXfer+0x294>
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e041      	b.n	8005008 <USB_EPStartXfer+0x318>
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <USB_EPStartXfer+0x2b4>
 8004f9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e024      	b.n	8005008 <USB_EPStartXfer+0x318>
 8004fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d11c      	bne.n	8005008 <USB_EPStartXfer+0x318>
 8004fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	4413      	add	r3, r2
 8004fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	011a      	lsls	r2, r3, #4
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005002:	b29a      	uxth	r2, r3
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	895b      	ldrh	r3, [r3, #10]
 8005014:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6959      	ldr	r1, [r3, #20]
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	b29b      	uxth	r3, r3
 800502a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800502e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005032:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005036:	6800      	ldr	r0, [r0, #0]
 8005038:	f001 fb49 	bl	80066ce <USB_WritePMA>
            ep->xfer_buff += len;
 800503c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504c:	441a      	add	r2, r3
 800504e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800505a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1a      	ldr	r2, [r3, #32]
 8005066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	429a      	cmp	r2, r3
 8005074:	d90f      	bls.n	8005096 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005086:	1ad2      	subs	r2, r2, r3
 8005088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	621a      	str	r2, [r3, #32]
 8005094:	e00e      	b.n	80050b4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80050a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2200      	movs	r2, #0
 80050b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d177      	bne.n	80051b4 <USB_EPStartXfer+0x4c4>
 80050c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	4413      	add	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	011a      	lsls	r2, r3, #4
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4413      	add	r3, r2
 80050fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510a:	b29a      	uxth	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005114:	2b3e      	cmp	r3, #62	@ 0x3e
 8005116:	d921      	bls.n	800515c <USB_EPStartXfer+0x46c>
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <USB_EPStartXfer+0x448>
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005132:	3b01      	subs	r3, #1
 8005134:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29a      	uxth	r2, r3
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005142:	b29b      	uxth	r3, r3
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	b29b      	uxth	r3, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005154:	b29a      	uxth	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e056      	b.n	800520a <USB_EPStartXfer+0x51a>
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <USB_EPStartXfer+0x48a>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005172:	b29a      	uxth	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	801a      	strh	r2, [r3, #0]
 8005178:	e047      	b.n	800520a <USB_EPStartXfer+0x51a>
 800517a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <USB_EPStartXfer+0x4aa>
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005194:	3301      	adds	r3, #1
 8005196:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29a      	uxth	r2, r3
 80051a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	029b      	lsls	r3, r3, #10
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	e02a      	b.n	800520a <USB_EPStartXfer+0x51a>
 80051b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d122      	bne.n	800520a <USB_EPStartXfer+0x51a>
 80051c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	4413      	add	r3, r2
 80051e6:	623b      	str	r3, [r7, #32]
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	011a      	lsls	r2, r3, #4
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	4413      	add	r3, r2
 80051fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005204:	b29a      	uxth	r2, r3
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	891b      	ldrh	r3, [r3, #8]
 8005216:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800521a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6959      	ldr	r1, [r3, #20]
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522a:	b29b      	uxth	r3, r3
 800522c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005230:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005234:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005238:	6800      	ldr	r0, [r0, #0]
 800523a:	f001 fa48 	bl	80066ce <USB_WritePMA>
 800523e:	e3ee      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d177      	bne.n	8005340 <USB_EPStartXfer+0x650>
 8005250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800525c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005270:	4413      	add	r3, r2
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	011a      	lsls	r2, r3, #4
 8005282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005284:	4413      	add	r3, r2
 8005286:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
 800528c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005296:	b29a      	uxth	r2, r3
 8005298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80052a2:	d921      	bls.n	80052e8 <USB_EPStartXfer+0x5f8>
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <USB_EPStartXfer+0x5d4>
 80052ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052be:	3b01      	subs	r3, #1
 80052c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	029b      	lsls	r3, r3, #10
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e056      	b.n	8005396 <USB_EPStartXfer+0x6a6>
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <USB_EPStartXfer+0x616>
 80052f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	e047      	b.n	8005396 <USB_EPStartXfer+0x6a6>
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <USB_EPStartXfer+0x636>
 800531c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005320:	3301      	adds	r3, #1
 8005322:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005330:	b29b      	uxth	r3, r3
 8005332:	029b      	lsls	r3, r3, #10
 8005334:	b29b      	uxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e02a      	b.n	8005396 <USB_EPStartXfer+0x6a6>
 8005340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d122      	bne.n	8005396 <USB_EPStartXfer+0x6a6>
 8005350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	653b      	str	r3, [r7, #80]	@ 0x50
 800535c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800536a:	b29b      	uxth	r3, r3
 800536c:	461a      	mov	r2, r3
 800536e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005370:	4413      	add	r3, r2
 8005372:	653b      	str	r3, [r7, #80]	@ 0x50
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	011a      	lsls	r2, r3, #4
 8005382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005384:	4413      	add	r3, r2
 8005386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800538a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005390:	b29a      	uxth	r2, r3
 8005392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	891b      	ldrh	r3, [r3, #8]
 80053a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6959      	ldr	r1, [r3, #20]
 80053b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053c4:	6800      	ldr	r0, [r0, #0]
 80053c6:	f001 f982 	bl	80066ce <USB_WritePMA>
            ep->xfer_buff += len;
 80053ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053da:	441a      	add	r2, r3
 80053dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	429a      	cmp	r2, r3
 8005402:	d90f      	bls.n	8005424 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	621a      	str	r2, [r3, #32]
 8005422:	e00e      	b.n	8005442 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	643b      	str	r3, [r7, #64]	@ 0x40
 800544e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d177      	bne.n	800554e <USB_EPStartXfer+0x85e>
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	63bb      	str	r3, [r7, #56]	@ 0x38
 800546a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547e:	4413      	add	r3, r2
 8005480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	011a      	lsls	r2, r3, #4
 8005490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005492:	4413      	add	r3, r2
 8005494:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
 800549a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80054b0:	d921      	bls.n	80054f6 <USB_EPStartXfer+0x806>
 80054b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <USB_EPStartXfer+0x7e2>
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054cc:	3b01      	subs	r3, #1
 80054ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e050      	b.n	8005598 <USB_EPStartXfer+0x8a8>
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <USB_EPStartXfer+0x824>
 80054fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550c:	b29a      	uxth	r2, r3
 800550e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	e041      	b.n	8005598 <USB_EPStartXfer+0x8a8>
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <USB_EPStartXfer+0x844>
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552e:	3301      	adds	r3, #1
 8005530:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29a      	uxth	r2, r3
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	b29b      	uxth	r3, r3
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	b29b      	uxth	r3, r3
 8005544:	4313      	orrs	r3, r2
 8005546:	b29a      	uxth	r2, r3
 8005548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e024      	b.n	8005598 <USB_EPStartXfer+0x8a8>
 800554e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d11c      	bne.n	8005598 <USB_EPStartXfer+0x8a8>
 800555e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005572:	4413      	add	r3, r2
 8005574:	643b      	str	r3, [r7, #64]	@ 0x40
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	011a      	lsls	r2, r3, #4
 8005584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005586:	4413      	add	r3, r2
 8005588:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800558c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800558e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005592:	b29a      	uxth	r2, r3
 8005594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005596:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	895b      	ldrh	r3, [r3, #10]
 80055a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6959      	ldr	r1, [r3, #20]
 80055b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	f001 f881 	bl	80066ce <USB_WritePMA>
 80055cc:	e227      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80055de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005604:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800563a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005654:	b29b      	uxth	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800565a:	4413      	add	r3, r2
 800565c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800565e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	011a      	lsls	r2, r3, #4
 800566c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566e:	4413      	add	r3, r2
 8005670:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005674:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567a:	b29a      	uxth	r2, r3
 800567c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800567e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	891b      	ldrh	r3, [r3, #8]
 800568c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6959      	ldr	r1, [r3, #20]
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056ae:	6800      	ldr	r0, [r0, #0]
 80056b0:	f001 f80d 	bl	80066ce <USB_WritePMA>
 80056b4:	e1b3      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a1a      	ldr	r2, [r3, #32]
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80c6 	beq.w	8005888 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	673b      	str	r3, [r7, #112]	@ 0x70
 8005708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	785b      	ldrb	r3, [r3, #1]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d177      	bne.n	8005808 <USB_EPStartXfer+0xb18>
 8005718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005738:	4413      	add	r3, r2
 800573a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800573c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800574c:	4413      	add	r3, r2
 800574e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005752:	667b      	str	r3, [r7, #100]	@ 0x64
 8005754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575e:	b29a      	uxth	r2, r3
 8005760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005768:	2b3e      	cmp	r3, #62	@ 0x3e
 800576a:	d921      	bls.n	80057b0 <USB_EPStartXfer+0xac0>
 800576c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <USB_EPStartXfer+0xa9c>
 8005782:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005786:	3b01      	subs	r3, #1
 8005788:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800578c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29a      	uxth	r2, r3
 8005792:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005796:	b29b      	uxth	r3, r3
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	b29b      	uxth	r3, r3
 800579c:	4313      	orrs	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e050      	b.n	8005852 <USB_EPStartXfer+0xb62>
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <USB_EPStartXfer+0xade>
 80057b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e041      	b.n	8005852 <USB_EPStartXfer+0xb62>
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d004      	beq.n	80057ee <USB_EPStartXfer+0xafe>
 80057e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057e8:	3301      	adds	r3, #1
 80057ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	b29a      	uxth	r2, r3
 8005802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e024      	b.n	8005852 <USB_EPStartXfer+0xb62>
 8005808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d11c      	bne.n	8005852 <USB_EPStartXfer+0xb62>
 8005818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800582c:	4413      	add	r3, r2
 800582e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	011a      	lsls	r2, r3, #4
 800583e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005840:	4413      	add	r3, r2
 8005842:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005846:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	b29a      	uxth	r2, r3
 800584e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005850:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	895b      	ldrh	r3, [r3, #10]
 800585e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6959      	ldr	r1, [r3, #20]
 800586e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005872:	b29b      	uxth	r3, r3
 8005874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005878:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800587c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005880:	6800      	ldr	r0, [r0, #0]
 8005882:	f000 ff24 	bl	80066ce <USB_WritePMA>
 8005886:	e0ca      	b.n	8005a1e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d177      	bne.n	8005988 <USB_EPStartXfer+0xc98>
 8005898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058b8:	4413      	add	r3, r2
 80058ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	011a      	lsls	r2, r3, #4
 80058ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058cc:	4413      	add	r3, r2
 80058ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80058ea:	d921      	bls.n	8005930 <USB_EPStartXfer+0xc40>
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <USB_EPStartXfer+0xc1c>
 8005902:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005906:	3b01      	subs	r3, #1
 8005908:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800590c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29a      	uxth	r2, r3
 8005912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005916:	b29b      	uxth	r3, r3
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	b29b      	uxth	r3, r3
 800591c:	4313      	orrs	r3, r2
 800591e:	b29b      	uxth	r3, r3
 8005920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005928:	b29a      	uxth	r2, r3
 800592a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e05c      	b.n	80059ea <USB_EPStartXfer+0xcfa>
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <USB_EPStartXfer+0xc5e>
 8005938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005946:	b29a      	uxth	r2, r3
 8005948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	e04d      	b.n	80059ea <USB_EPStartXfer+0xcfa>
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <USB_EPStartXfer+0xc7e>
 8005964:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005968:	3301      	adds	r3, #1
 800596a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800596e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29a      	uxth	r2, r3
 8005974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005978:	b29b      	uxth	r3, r3
 800597a:	029b      	lsls	r3, r3, #10
 800597c:	b29b      	uxth	r3, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e030      	b.n	80059ea <USB_EPStartXfer+0xcfa>
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d128      	bne.n	80059ea <USB_EPStartXfer+0xcfa>
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059bc:	4413      	add	r3, r2
 80059be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	011a      	lsls	r2, r3, #4
 80059d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	891b      	ldrh	r3, [r3, #8]
 80059f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a18:	6800      	ldr	r0, [r0, #0]
 8005a1a:	f000 fe58 	bl	80066ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	897b      	ldrh	r3, [r7, #10]
 8005a48:	f083 0310 	eor.w	r3, r3, #16
 8005a4c:	817b      	strh	r3, [r7, #10]
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	f083 0320 	eor.w	r3, r3, #32
 8005a54:	817b      	strh	r3, [r7, #10]
 8005a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	897b      	ldrh	r3, [r7, #10]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
 8005a86:	f000 bcde 	b.w	8006446 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	7b1b      	ldrb	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f040 80bb 	bne.w	8005c12 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d917      	bls.n	8005ae8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	619a      	str	r2, [r3, #24]
 8005ae6:	e00e      	b.n	8005b06 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	011a      	lsls	r2, r3, #4
 8005b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b66:	d924      	bls.n	8005bb2 <USB_EPStartXfer+0xec2>
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d104      	bne.n	8005b88 <USB_EPStartXfer+0xe98>
 8005b7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b82:	3b01      	subs	r3, #1
 8005b84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	f000 bc10 	b.w	80063d2 <USB_EPStartXfer+0x16e2>
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10c      	bne.n	8005bd4 <USB_EPStartXfer+0xee4>
 8005bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e3fe      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <USB_EPStartXfer+0xf04>
 8005bea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e3df      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	f040 8218 	bne.w	8006054 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 809d 	bne.w	8005d70 <USB_EPStartXfer+0x1080>
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	011a      	lsls	r2, r3, #4
 8005c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c72:	4413      	add	r3, r2
 8005c74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c9e:	d92b      	bls.n	8005cf8 <USB_EPStartXfer+0x1008>
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <USB_EPStartXfer+0xfe0>
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	e070      	b.n	8005dda <USB_EPStartXfer+0x10ea>
 8005cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10c      	bne.n	8005d22 <USB_EPStartXfer+0x1032>
 8005d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e05b      	b.n	8005dda <USB_EPStartXfer+0x10ea>
 8005d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <USB_EPStartXfer+0x1062>
 8005d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	029b      	lsls	r3, r3, #10
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4313      	orrs	r3, r2
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e034      	b.n	8005dda <USB_EPStartXfer+0x10ea>
 8005d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d12c      	bne.n	8005dda <USB_EPStartXfer+0x10ea>
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005da4:	4413      	add	r3, r2
 8005da6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	011a      	lsls	r2, r3, #4
 8005db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 809d 	bne.w	8005f34 <USB_EPStartXfer+0x1244>
 8005dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e1e:	4413      	add	r3, r2
 8005e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	011a      	lsls	r2, r3, #4
 8005e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e62:	d92b      	bls.n	8005ebc <USB_EPStartXfer+0x11cc>
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USB_EPStartXfer+0x11a4>
 8005e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e069      	b.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <USB_EPStartXfer+0x11f6>
 8005ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e054      	b.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <USB_EPStartXfer+0x1226>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	3301      	adds	r3, #1
 8005f12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e02d      	b.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d125      	bne.n	8005f90 <USB_EPStartXfer+0x12a0>
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	011a      	lsls	r2, r3, #4
 8005f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f72:	4413      	add	r3, r2
 8005f74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f8e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8218 	beq.w	80063d2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fc2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <USB_EPStartXfer+0x12ea>
 8005fce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10d      	bne.n	8005ff6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 81f5 	bne.w	80063d2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fe8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f040 81ee 	bne.w	80063d2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	441a      	add	r2, r3
 800603a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800603e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006042:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800604e:	b29b      	uxth	r3, r3
 8006050:	8013      	strh	r3, [r2, #0]
 8006052:	e1be      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	2b01      	cmp	r3, #1
 8006062:	f040 81b4 	bne.w	80063ce <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d917      	bls.n	80060b2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a2:	1ad2      	subs	r2, r2, r3
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	619a      	str	r2, [r3, #24]
 80060b0:	e00e      	b.n	80060d0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80060b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8085 	bne.w	80061ec <USB_EPStartXfer+0x14fc>
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006106:	4413      	add	r3, r2
 8006108:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	011a      	lsls	r2, r3, #4
 800611a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800611e:	4413      	add	r3, r2
 8006120:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	2b3e      	cmp	r3, #62	@ 0x3e
 8006142:	d923      	bls.n	800618c <USB_EPStartXfer+0x149c>
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <USB_EPStartXfer+0x1474>
 800615a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800615e:	3b01      	subs	r3, #1
 8006160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29a      	uxth	r2, r3
 800616c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006170:	b29b      	uxth	r3, r3
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	b29b      	uxth	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006182:	b29a      	uxth	r2, r3
 8006184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	e060      	b.n	800624e <USB_EPStartXfer+0x155e>
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <USB_EPStartXfer+0x14be>
 8006194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e04f      	b.n	800624e <USB_EPStartXfer+0x155e>
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <USB_EPStartXfer+0x14de>
 80061c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c8:	3301      	adds	r3, #1
 80061ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	e030      	b.n	800624e <USB_EPStartXfer+0x155e>
 80061ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d128      	bne.n	800624e <USB_EPStartXfer+0x155e>
 80061fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006220:	4413      	add	r3, r2
 8006222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	011a      	lsls	r2, r3, #4
 8006234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006238:	4413      	add	r3, r2
 800623a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800623e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	b29a      	uxth	r2, r3
 8006248:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f040 8085 	bne.w	8006378 <USB_EPStartXfer+0x1688>
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006292:	4413      	add	r3, r2
 8006294:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	011a      	lsls	r2, r3, #4
 80062a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062aa:	4413      	add	r3, r2
 80062ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ce:	d923      	bls.n	8006318 <USB_EPStartXfer+0x1628>
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <USB_EPStartXfer+0x1600>
 80062e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062ea:	3b01      	subs	r3, #1
 80062ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	029b      	lsls	r3, r3, #10
 8006300:	b29b      	uxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b29b      	uxth	r3, r3
 8006306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e05c      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10c      	bne.n	800633a <USB_EPStartXfer+0x164a>
 8006320:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006330:	b29a      	uxth	r2, r3
 8006332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e04b      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <USB_EPStartXfer+0x166a>
 8006350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006354:	3301      	adds	r3, #1
 8006356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800635a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29a      	uxth	r2, r3
 8006362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006366:	b29b      	uxth	r3, r3
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	b29b      	uxth	r3, r3
 800636c:	4313      	orrs	r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e02c      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d124      	bne.n	80063d2 <USB_EPStartXfer+0x16e2>
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800639e:	4413      	add	r3, r2
 80063a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	011a      	lsls	r2, r3, #4
 80063b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063b6:	4413      	add	r3, r2
 80063b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e001      	b.n	80063d2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e03a      	b.n	8006448 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80063fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006400:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006404:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006408:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800640c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006410:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647a:	81bb      	strh	r3, [r7, #12]
 800647c:	89bb      	ldrh	r3, [r7, #12]
 800647e:	f083 0310 	eor.w	r3, r3, #16
 8006482:	81bb      	strh	r3, [r7, #12]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	89bb      	ldrh	r3, [r7, #12]
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]
 80064a4:	e01f      	b.n	80064e6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064bc:	81fb      	strh	r3, [r7, #14]
 80064be:	89fb      	ldrh	r3, [r7, #14]
 80064c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064c4:	81fb      	strh	r3, [r7, #14]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	89fb      	ldrh	r3, [r7, #14]
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr

080064f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	7b1b      	ldrb	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 809d 	bne.w	8006640 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d04c      	beq.n	80065a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	823b      	strh	r3, [r7, #16]
 800651c:	8a3b      	ldrh	r3, [r7, #16]
 800651e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01b      	beq.n	800655e <USB_EPClearStall+0x6c>
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653c:	81fb      	strh	r3, [r7, #14]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	89fb      	ldrh	r3, [r7, #14]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006556:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d06c      	beq.n	8006640 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800657c:	81bb      	strh	r3, [r7, #12]
 800657e:	89bb      	ldrh	r3, [r7, #12]
 8006580:	f083 0320 	eor.w	r3, r3, #32
 8006584:	81bb      	strh	r3, [r7, #12]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	89bb      	ldrh	r3, [r7, #12]
 8006592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]
 80065a6:	e04b      	b.n	8006640 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	82fb      	strh	r3, [r7, #22]
 80065b6:	8afb      	ldrh	r3, [r7, #22]
 80065b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01b      	beq.n	80065f8 <USB_EPClearStall+0x106>
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d6:	82bb      	strh	r3, [r7, #20]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	8abb      	ldrh	r3, [r7, #20]
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	827b      	strh	r3, [r7, #18]
 8006610:	8a7b      	ldrh	r3, [r7, #18]
 8006612:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006616:	827b      	strh	r3, [r7, #18]
 8006618:	8a7b      	ldrh	r3, [r7, #18]
 800661a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800661e:	827b      	strh	r3, [r7, #18]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	8a7b      	ldrh	r3, [r7, #18]
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2280      	movs	r2, #128	@ 0x80
 8006662:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066ac:	68fb      	ldr	r3, [r7, #12]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b08b      	sub	sp, #44	@ 0x2c
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	4611      	mov	r1, r2
 80066da:	461a      	mov	r2, r3
 80066dc:	460b      	mov	r3, r1
 80066de:	80fb      	strh	r3, [r7, #6]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066e4:	88bb      	ldrh	r3, [r7, #4]
 80066e6:	3301      	adds	r3, #1
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	005a      	lsls	r2, r3, #1
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006700:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
 8006706:	e01e      	b.n	8006746 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3301      	adds	r3, #1
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	b21a      	sxth	r2, r3
 8006718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800671c:	4313      	orrs	r3, r2
 800671e:	b21b      	sxth	r3, r3
 8006720:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	8a7a      	ldrh	r2, [r7, #18]
 8006726:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	3302      	adds	r3, #2
 800672c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	3302      	adds	r3, #2
 8006732:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	3b01      	subs	r3, #1
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1dd      	bne.n	8006708 <USB_WritePMA+0x3a>
  }
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	372c      	adds	r7, #44	@ 0x2c
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006758:	b480      	push	{r7}
 800675a:	b08b      	sub	sp, #44	@ 0x2c
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	460b      	mov	r3, r1
 8006768:	80fb      	strh	r3, [r7, #6]
 800676a:	4613      	mov	r3, r2
 800676c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800676e:	88bb      	ldrh	r3, [r7, #4]
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	b29b      	uxth	r3, r3
 8006774:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	005a      	lsls	r2, r3, #1
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800678a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006790:	e01b      	b.n	80067ca <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	3302      	adds	r3, #2
 800679e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	3301      	adds	r3, #1
 80067bc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	3302      	adds	r3, #2
 80067c2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	3b01      	subs	r3, #1
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e0      	bne.n	8006792 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80067d0:	88bb      	ldrh	r3, [r7, #4]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	701a      	strb	r2, [r3, #0]
  }
}
 80067ec:	bf00      	nop
 80067ee:	372c      	adds	r7, #44	@ 0x2c
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006802:	2304      	movs	r3, #4
 8006804:	2203      	movs	r2, #3
 8006806:	2181      	movs	r1, #129	@ 0x81
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fc80 	bl	800810e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006814:	2010      	movs	r0, #16
 8006816:	f001 fd8f 	bl	8008338 <USBD_static_malloc>
 800681a:	4602      	mov	r2, r0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800682c:	2302      	movs	r3, #2
 800682e:	e005      	b.n	800683c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006836:	2200      	movs	r2, #0
 8006838:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006850:	2181      	movs	r1, #129	@ 0x81
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fc81 	bl	800815a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686e:	4618      	mov	r0, r3
 8006870:	f001 fd6e 	bl	8008350 <USBD_static_free>
    pdev->pClassData = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006898:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d045      	beq.n	8006942 <USBD_HID_Setup+0xba>
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	f040 80d3 	bne.w	8006a62 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	3b02      	subs	r3, #2
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d835      	bhi.n	8006932 <USBD_HID_Setup+0xaa>
 80068c6:	a201      	add	r2, pc, #4	@ (adr r2, 80068cc <USBD_HID_Setup+0x44>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	08006923 	.word	0x08006923
 80068d0:	08006903 	.word	0x08006903
 80068d4:	08006933 	.word	0x08006933
 80068d8:	08006933 	.word	0x08006933
 80068dc:	08006933 	.word	0x08006933
 80068e0:	08006933 	.word	0x08006933
 80068e4:	08006933 	.word	0x08006933
 80068e8:	08006933 	.word	0x08006933
 80068ec:	08006911 	.word	0x08006911
 80068f0:	080068f5 	.word	0x080068f5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	885b      	ldrh	r3, [r3, #2]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	601a      	str	r2, [r3, #0]
          break;
 8006900:	e01e      	b.n	8006940 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2201      	movs	r2, #1
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 f941 	bl	8007b90 <USBD_CtlSendData>
          break;
 800690e:	e017      	b.n	8006940 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	885b      	ldrh	r3, [r3, #2]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	b29b      	uxth	r3, r3
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	605a      	str	r2, [r3, #4]
          break;
 8006920:	e00e      	b.n	8006940 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3304      	adds	r3, #4
 8006926:	2201      	movs	r2, #1
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 f930 	bl	8007b90 <USBD_CtlSendData>
          break;
 8006930:	e006      	b.n	8006940 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 f8c1 	bl	8007abc <USBD_CtlError>
          ret = USBD_FAIL;
 800693a:	2302      	movs	r3, #2
 800693c:	75fb      	strb	r3, [r7, #23]
          break;
 800693e:	bf00      	nop
      }
      break;
 8006940:	e096      	b.n	8006a70 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b0b      	cmp	r3, #11
 8006948:	f200 8083 	bhi.w	8006a52 <USBD_HID_Setup+0x1ca>
 800694c:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <USBD_HID_Setup+0xcc>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006985 	.word	0x08006985
 8006958:	08006a53 	.word	0x08006a53
 800695c:	08006a53 	.word	0x08006a53
 8006960:	08006a53 	.word	0x08006a53
 8006964:	08006a53 	.word	0x08006a53
 8006968:	08006a53 	.word	0x08006a53
 800696c:	080069ad 	.word	0x080069ad
 8006970:	08006a53 	.word	0x08006a53
 8006974:	08006a53 	.word	0x08006a53
 8006978:	08006a53 	.word	0x08006a53
 800697c:	08006a05 	.word	0x08006a05
 8006980:	08006a2d 	.word	0x08006a2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800698a:	2b03      	cmp	r3, #3
 800698c:	d107      	bne.n	800699e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800698e:	f107 030e 	add.w	r3, r7, #14
 8006992:	2202      	movs	r2, #2
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f8fa 	bl	8007b90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800699c:	e060      	b.n	8006a60 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f88b 	bl	8007abc <USBD_CtlError>
            ret = USBD_FAIL;
 80069a6:	2302      	movs	r3, #2
 80069a8:	75fb      	strb	r3, [r7, #23]
          break;
 80069aa:	e059      	b.n	8006a60 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	885b      	ldrh	r3, [r3, #2]
 80069b0:	0a1b      	lsrs	r3, r3, #8
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b22      	cmp	r3, #34	@ 0x22
 80069b6:	d108      	bne.n	80069ca <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	88db      	ldrh	r3, [r3, #6]
 80069bc:	2b4a      	cmp	r3, #74	@ 0x4a
 80069be:	bf28      	it	cs
 80069c0:	234a      	movcs	r3, #74	@ 0x4a
 80069c2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80069c4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a7c <USBD_HID_Setup+0x1f4>)
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	e015      	b.n	80069f6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	885b      	ldrh	r3, [r3, #2]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b21      	cmp	r3, #33	@ 0x21
 80069d4:	d108      	bne.n	80069e8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80069d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a80 <USBD_HID_Setup+0x1f8>)
 80069d8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	88db      	ldrh	r3, [r3, #6]
 80069de:	2b09      	cmp	r3, #9
 80069e0:	bf28      	it	cs
 80069e2:	2309      	movcs	r3, #9
 80069e4:	83fb      	strh	r3, [r7, #30]
 80069e6:	e006      	b.n	80069f6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f866 	bl	8007abc <USBD_CtlError>
            ret = USBD_FAIL;
 80069f0:	2302      	movs	r3, #2
 80069f2:	75fb      	strb	r3, [r7, #23]
            break;
 80069f4:	e034      	b.n	8006a60 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80069f6:	8bfb      	ldrh	r3, [r7, #30]
 80069f8:	461a      	mov	r2, r3
 80069fa:	69b9      	ldr	r1, [r7, #24]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f8c7 	bl	8007b90 <USBD_CtlSendData>
          break;
 8006a02:	e02d      	b.n	8006a60 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d107      	bne.n	8006a1e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	3308      	adds	r3, #8
 8006a12:	2201      	movs	r2, #1
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f8ba 	bl	8007b90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a1c:	e020      	b.n	8006a60 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f84b 	bl	8007abc <USBD_CtlError>
            ret = USBD_FAIL;
 8006a26:	2302      	movs	r3, #2
 8006a28:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2a:	e019      	b.n	8006a60 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d106      	bne.n	8006a44 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	885b      	ldrh	r3, [r3, #2]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a42:	e00d      	b.n	8006a60 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f838 	bl	8007abc <USBD_CtlError>
            ret = USBD_FAIL;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a50:	e006      	b.n	8006a60 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f831 	bl	8007abc <USBD_CtlError>
          ret = USBD_FAIL;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5e:	bf00      	nop
      }
      break;
 8006a60:	e006      	b.n	8006a70 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 f829 	bl	8007abc <USBD_CtlError>
      ret = USBD_FAIL;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6e:	bf00      	nop
  }

  return ret;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200000cc 	.word	0x200000cc
 8006a80:	200000b4 	.word	0x200000b4

08006a84 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a98:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d10c      	bne.n	8006abe <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	7b1b      	ldrb	r3, [r3, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	2181      	movs	r1, #129	@ 0x81
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f001 fbf6 	bl	80082aa <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2222      	movs	r2, #34	@ 0x22
 8006ad4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006ad6:	4b03      	ldr	r3, [pc, #12]	@ (8006ae4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000048 	.word	0x20000048

08006ae8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2222      	movs	r2, #34	@ 0x22
 8006af4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006af6:	4b03      	ldr	r3, [pc, #12]	@ (8006b04 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	2000006c 	.word	0x2000006c

08006b08 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2222      	movs	r2, #34	@ 0x22
 8006b14:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006b16:	4b03      	ldr	r3, [pc, #12]	@ (8006b24 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000090 	.word	0x20000090

08006b28 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr
	...

08006b4c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	220a      	movs	r2, #10
 8006b58:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006b5a:	4b03      	ldr	r3, [pc, #12]	@ (8006b68 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	200000c0 	.word	0x200000c0

08006b6c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b80:	2302      	movs	r3, #2
 8006b82:	e01a      	b.n	8006bba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	79fa      	ldrb	r2, [r7, #7]
 8006bb0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 fa48 	bl	8008048 <USBD_LL_Init>

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d006      	beq.n	8006be4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	e001      	b.n	8006be8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006be4:	2302      	movs	r3, #2
 8006be6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 fa6b 	bl	80080d8 <USBD_LL_Start>

  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr

08006c20 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00c      	beq.n	8006c54 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	78fa      	ldrb	r2, [r7, #3]
 8006c44:	4611      	mov	r1, r2
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	4611      	mov	r1, r2
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3

  return USBD_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fed7 	bl	8007a4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006caa:	461a      	mov	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d016      	beq.n	8006cee <USBD_LL_SetupStage+0x6a>
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d81c      	bhi.n	8006cfe <USBD_LL_SetupStage+0x7a>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <USBD_LL_SetupStage+0x4a>
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d008      	beq.n	8006cde <USBD_LL_SetupStage+0x5a>
 8006ccc:	e017      	b.n	8006cfe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9ca 	bl	8007070 <USBD_StdDevReq>
      break;
 8006cdc:	e01a      	b.n	8006d14 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa2c 	bl	8007144 <USBD_StdItfReq>
      break;
 8006cec:	e012      	b.n	8006d14 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa6c 	bl	80071d4 <USBD_StdEPReq>
      break;
 8006cfc:	e00a      	b.n	8006d14 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006d04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fa43 	bl	8008198 <USBD_LL_StallEP>
      break;
 8006d12:	bf00      	nop
  }

  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b086      	sub	sp, #24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	460b      	mov	r3, r1
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d14b      	bne.n	8006dca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d134      	bne.n	8006dae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d919      	bls.n	8006d84 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d203      	bcs.n	8006d72 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	e002      	b.n	8006d78 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 ff35 	bl	8007bec <USBD_CtlContinueRx>
 8006d82:	e038      	b.n	8006df6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d105      	bne.n	8006da6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 ff32 	bl	8007c10 <USBD_CtlSendStatus>
 8006dac:	e023      	b.n	8006df6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006db4:	2b05      	cmp	r3, #5
 8006db6:	d11e      	bne.n	8006df6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f001 f9e8 	bl	8008198 <USBD_LL_StallEP>
 8006dc8:	e015      	b.n	8006df6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00d      	beq.n	8006df2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d108      	bne.n	8006df2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	7afa      	ldrb	r2, [r7, #11]
 8006dea:	4611      	mov	r1, r2
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	4798      	blx	r3
 8006df0:	e001      	b.n	8006df6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006df2:	2302      	movs	r3, #2
 8006df4:	e000      	b.n	8006df8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d17f      	bne.n	8006f14 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3314      	adds	r3, #20
 8006e18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d15c      	bne.n	8006ede <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d915      	bls.n	8006e5c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	1ad2      	subs	r2, r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 febd 	bl	8007bc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2200      	movs	r2, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f001 fa4b 	bl	80082f0 <USBD_LL_PrepareReceive>
 8006e5a:	e04e      	b.n	8006efa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	6912      	ldr	r2, [r2, #16]
 8006e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e68:	fb01 f202 	mul.w	r2, r1, r2
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d11c      	bne.n	8006eac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d316      	bcc.n	8006eac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d20f      	bcs.n	8006eac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 fe99 	bl	8007bc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f001 fa23 	bl	80082f0 <USBD_LL_PrepareReceive>
 8006eaa:	e026      	b.n	8006efa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d105      	bne.n	8006ece <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ece:	2180      	movs	r1, #128	@ 0x80
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f001 f961 	bl	8008198 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fead 	bl	8007c36 <USBD_CtlReceiveStatus>
 8006edc:	e00d      	b.n	8006efa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d004      	beq.n	8006ef2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ef2:	2180      	movs	r1, #128	@ 0x80
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f001 f94f 	bl	8008198 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d11d      	bne.n	8006f40 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fe81 	bl	8006c0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006f12:	e015      	b.n	8006f40 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00d      	beq.n	8006f3c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d108      	bne.n	8006f3c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	7afa      	ldrb	r2, [r7, #11]
 8006f34:	4611      	mov	r1, r2
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	4798      	blx	r3
 8006f3a:	e001      	b.n	8006f40 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e000      	b.n	8006f42 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f52:	2340      	movs	r3, #64	@ 0x40
 8006f54:	2200      	movs	r2, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f8d8 	bl	800810e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2240      	movs	r2, #64	@ 0x40
 8006f6a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f6e:	2340      	movs	r3, #64	@ 0x40
 8006f70:	2200      	movs	r2, #0
 8006f72:	2180      	movs	r1, #128	@ 0x80
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f8ca 	bl	800810e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2240      	movs	r2, #64	@ 0x40
 8006f84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6852      	ldr	r2, [r2, #4]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
  }

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr

08007012 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007020:	2b04      	cmp	r3, #4
 8007022:	d105      	bne.n	8007030 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr

0800703c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800704a:	2b03      	cmp	r3, #3
 800704c:	d10b      	bne.n	8007066 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007086:	2b40      	cmp	r3, #64	@ 0x40
 8007088:	d005      	beq.n	8007096 <USBD_StdDevReq+0x26>
 800708a:	2b40      	cmp	r3, #64	@ 0x40
 800708c:	d84f      	bhi.n	800712e <USBD_StdDevReq+0xbe>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <USBD_StdDevReq+0x36>
 8007092:	2b20      	cmp	r3, #32
 8007094:	d14b      	bne.n	800712e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
      break;
 80070a4:	e048      	b.n	8007138 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	d839      	bhi.n	8007122 <USBD_StdDevReq+0xb2>
 80070ae:	a201      	add	r2, pc, #4	@ (adr r2, 80070b4 <USBD_StdDevReq+0x44>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	08007105 	.word	0x08007105
 80070b8:	08007119 	.word	0x08007119
 80070bc:	08007123 	.word	0x08007123
 80070c0:	0800710f 	.word	0x0800710f
 80070c4:	08007123 	.word	0x08007123
 80070c8:	080070e7 	.word	0x080070e7
 80070cc:	080070dd 	.word	0x080070dd
 80070d0:	08007123 	.word	0x08007123
 80070d4:	080070fb 	.word	0x080070fb
 80070d8:	080070f1 	.word	0x080070f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9dc 	bl	800749c <USBD_GetDescriptor>
          break;
 80070e4:	e022      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb3f 	bl	800776c <USBD_SetAddress>
          break;
 80070ee:	e01d      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fb7e 	bl	80077f4 <USBD_SetConfig>
          break;
 80070f8:	e018      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc07 	bl	8007910 <USBD_GetConfig>
          break;
 8007102:	e013      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fc37 	bl	800797a <USBD_GetStatus>
          break;
 800710c:	e00e      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc65 	bl	80079e0 <USBD_SetFeature>
          break;
 8007116:	e009      	b.n	800712c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fc74 	bl	8007a08 <USBD_ClrFeature>
          break;
 8007120:	e004      	b.n	800712c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fcc9 	bl	8007abc <USBD_CtlError>
          break;
 800712a:	bf00      	nop
      }
      break;
 800712c:	e004      	b.n	8007138 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fcc3 	bl	8007abc <USBD_CtlError>
      break;
 8007136:	bf00      	nop
  }

  return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop

08007144 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800715a:	2b40      	cmp	r3, #64	@ 0x40
 800715c:	d005      	beq.n	800716a <USBD_StdItfReq+0x26>
 800715e:	2b40      	cmp	r3, #64	@ 0x40
 8007160:	d82e      	bhi.n	80071c0 <USBD_StdItfReq+0x7c>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <USBD_StdItfReq+0x26>
 8007166:	2b20      	cmp	r3, #32
 8007168:	d12a      	bne.n	80071c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007170:	3b01      	subs	r3, #1
 8007172:	2b02      	cmp	r3, #2
 8007174:	d81d      	bhi.n	80071b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	889b      	ldrh	r3, [r3, #4]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b01      	cmp	r3, #1
 800717e:	d813      	bhi.n	80071a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	88db      	ldrh	r3, [r3, #6]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d110      	bne.n	80071bc <USBD_StdItfReq+0x78>
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10d      	bne.n	80071bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fd35 	bl	8007c10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071a6:	e009      	b.n	80071bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fc86 	bl	8007abc <USBD_CtlError>
          break;
 80071b0:	e004      	b.n	80071bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc81 	bl	8007abc <USBD_CtlError>
          break;
 80071ba:	e000      	b.n	80071be <USBD_StdItfReq+0x7a>
          break;
 80071bc:	bf00      	nop
      }
      break;
 80071be:	e004      	b.n	80071ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fc7a 	bl	8007abc <USBD_CtlError>
      break;
 80071c8:	bf00      	nop
  }

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	889b      	ldrh	r3, [r3, #4]
 80071e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071f0:	2b40      	cmp	r3, #64	@ 0x40
 80071f2:	d007      	beq.n	8007204 <USBD_StdEPReq+0x30>
 80071f4:	2b40      	cmp	r3, #64	@ 0x40
 80071f6:	f200 8146 	bhi.w	8007486 <USBD_StdEPReq+0x2b2>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <USBD_StdEPReq+0x40>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	f040 8141 	bne.w	8007486 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
      break;
 8007212:	e13d      	b.n	8007490 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800721c:	2b20      	cmp	r3, #32
 800721e:	d10a      	bne.n	8007236 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	e12d      	b.n	8007492 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d007      	beq.n	800724e <USBD_StdEPReq+0x7a>
 800723e:	2b03      	cmp	r3, #3
 8007240:	f300 811b 	bgt.w	800747a <USBD_StdEPReq+0x2a6>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d072      	beq.n	800732e <USBD_StdEPReq+0x15a>
 8007248:	2b01      	cmp	r3, #1
 800724a:	d03a      	beq.n	80072c2 <USBD_StdEPReq+0xee>
 800724c:	e115      	b.n	800747a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007254:	2b02      	cmp	r3, #2
 8007256:	d002      	beq.n	800725e <USBD_StdEPReq+0x8a>
 8007258:	2b03      	cmp	r3, #3
 800725a:	d015      	beq.n	8007288 <USBD_StdEPReq+0xb4>
 800725c:	e02b      	b.n	80072b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00c      	beq.n	800727e <USBD_StdEPReq+0xaa>
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b80      	cmp	r3, #128	@ 0x80
 8007268:	d009      	beq.n	800727e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 ff92 	bl	8008198 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007274:	2180      	movs	r1, #128	@ 0x80
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 ff8e 	bl	8008198 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800727c:	e020      	b.n	80072c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc1b 	bl	8007abc <USBD_CtlError>
              break;
 8007286:	e01b      	b.n	80072c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	885b      	ldrh	r3, [r3, #2]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10e      	bne.n	80072ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00b      	beq.n	80072ae <USBD_StdEPReq+0xda>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b80      	cmp	r3, #128	@ 0x80
 800729a:	d008      	beq.n	80072ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	88db      	ldrh	r3, [r3, #6]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 ff75 	bl	8008198 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fcae 	bl	8007c10 <USBD_CtlSendStatus>

              break;
 80072b4:	e004      	b.n	80072c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fbff 	bl	8007abc <USBD_CtlError>
              break;
 80072be:	bf00      	nop
          }
          break;
 80072c0:	e0e0      	b.n	8007484 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d002      	beq.n	80072d2 <USBD_StdEPReq+0xfe>
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d015      	beq.n	80072fc <USBD_StdEPReq+0x128>
 80072d0:	e026      	b.n	8007320 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <USBD_StdEPReq+0x11e>
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b80      	cmp	r3, #128	@ 0x80
 80072dc:	d009      	beq.n	80072f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 ff58 	bl	8008198 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072e8:	2180      	movs	r1, #128	@ 0x80
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 ff54 	bl	8008198 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072f0:	e01c      	b.n	800732c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fbe1 	bl	8007abc <USBD_CtlError>
              break;
 80072fa:	e017      	b.n	800732c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	885b      	ldrh	r3, [r3, #2]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d112      	bne.n	800732a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 ff5f 	bl	80081d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fc79 	bl	8007c10 <USBD_CtlSendStatus>
              }
              break;
 800731e:	e004      	b.n	800732a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fbca 	bl	8007abc <USBD_CtlError>
              break;
 8007328:	e000      	b.n	800732c <USBD_StdEPReq+0x158>
              break;
 800732a:	bf00      	nop
          }
          break;
 800732c:	e0aa      	b.n	8007484 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007334:	2b02      	cmp	r3, #2
 8007336:	d002      	beq.n	800733e <USBD_StdEPReq+0x16a>
 8007338:	2b03      	cmp	r3, #3
 800733a:	d032      	beq.n	80073a2 <USBD_StdEPReq+0x1ce>
 800733c:	e097      	b.n	800746e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <USBD_StdEPReq+0x180>
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b80      	cmp	r3, #128	@ 0x80
 8007348:	d004      	beq.n	8007354 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fbb5 	bl	8007abc <USBD_CtlError>
                break;
 8007352:	e091      	b.n	8007478 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	da0b      	bge.n	8007374 <USBD_StdEPReq+0x1a0>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	3310      	adds	r3, #16
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	4413      	add	r3, r2
 8007370:	3304      	adds	r3, #4
 8007372:	e00b      	b.n	800738c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	3304      	adds	r3, #4
 800738c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2202      	movs	r2, #2
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fbf8 	bl	8007b90 <USBD_CtlSendData>
              break;
 80073a0:	e06a      	b.n	8007478 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	da11      	bge.n	80073ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	f003 020f 	and.w	r2, r3, #15
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	3318      	adds	r3, #24
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d117      	bne.n	80073f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fb78 	bl	8007abc <USBD_CtlError>
                  break;
 80073cc:	e054      	b.n	8007478 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	f003 020f 	and.w	r2, r3, #15
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb65 	bl	8007abc <USBD_CtlError>
                  break;
 80073f2:	e041      	b.n	8007478 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da0b      	bge.n	8007414 <USBD_StdEPReq+0x240>
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	3310      	adds	r3, #16
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	3304      	adds	r3, #4
 8007412:	e00b      	b.n	800742c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	4413      	add	r3, r2
 800742a:	3304      	adds	r3, #4
 800742c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <USBD_StdEPReq+0x266>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b80      	cmp	r3, #128	@ 0x80
 8007438:	d103      	bne.n	8007442 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	e00e      	b.n	8007460 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fee4 	bl	8008214 <USBD_LL_IsStallEP>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2201      	movs	r2, #1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e002      	b.n	8007460 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2202      	movs	r2, #2
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb92 	bl	8007b90 <USBD_CtlSendData>
              break;
 800746c:	e004      	b.n	8007478 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb23 	bl	8007abc <USBD_CtlError>
              break;
 8007476:	bf00      	nop
          }
          break;
 8007478:	e004      	b.n	8007484 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb1d 	bl	8007abc <USBD_CtlError>
          break;
 8007482:	bf00      	nop
      }
      break;
 8007484:	e004      	b.n	8007490 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb17 	bl	8007abc <USBD_CtlError>
      break;
 800748e:	bf00      	nop
  }

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	0a1b      	lsrs	r3, r3, #8
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	2b06      	cmp	r3, #6
 80074be:	f200 8128 	bhi.w	8007712 <USBD_GetDescriptor+0x276>
 80074c2:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <USBD_GetDescriptor+0x2c>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074e5 	.word	0x080074e5
 80074cc:	080074fd 	.word	0x080074fd
 80074d0:	0800753d 	.word	0x0800753d
 80074d4:	08007713 	.word	0x08007713
 80074d8:	08007713 	.word	0x08007713
 80074dc:	080076b3 	.word	0x080076b3
 80074e0:	080076df 	.word	0x080076df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7c12      	ldrb	r2, [r2, #16]
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
      break;
 80074fa:	e112      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	7c1b      	ldrb	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	f107 0208 	add.w	r2, r7, #8
 8007510:	4610      	mov	r0, r2
 8007512:	4798      	blx	r3
 8007514:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	2202      	movs	r2, #2
 800751c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800751e:	e100      	b.n	8007722 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	f107 0208 	add.w	r2, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	2202      	movs	r2, #2
 8007538:	701a      	strb	r2, [r3, #0]
      break;
 800753a:	e0f2      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	885b      	ldrh	r3, [r3, #2]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b05      	cmp	r3, #5
 8007544:	f200 80ac 	bhi.w	80076a0 <USBD_GetDescriptor+0x204>
 8007548:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <USBD_GetDescriptor+0xb4>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007569 	.word	0x08007569
 8007554:	0800759d 	.word	0x0800759d
 8007558:	080075d1 	.word	0x080075d1
 800755c:	08007605 	.word	0x08007605
 8007560:	08007639 	.word	0x08007639
 8007564:	0800766d 	.word	0x0800766d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758a:	e091      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa94 	bl	8007abc <USBD_CtlError>
            err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
          break;
 800759a:	e089      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075be:	e077      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa7a 	bl	8007abc <USBD_CtlError>
            err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
          break;
 80075ce:	e06f      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f2:	e05d      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa60 	bl	8007abc <USBD_CtlError>
            err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
          break;
 8007602:	e055      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007626:	e043      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa46 	bl	8007abc <USBD_CtlError>
            err++;
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	3301      	adds	r3, #1
 8007634:	72fb      	strb	r3, [r7, #11]
          break;
 8007636:	e03b      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765a:	e029      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa2c 	bl	8007abc <USBD_CtlError>
            err++;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	3301      	adds	r3, #1
 8007668:	72fb      	strb	r3, [r7, #11]
          break;
 800766a:	e021      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800768e:	e00f      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa12 	bl	8007abc <USBD_CtlError>
            err++;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	3301      	adds	r3, #1
 800769c:	72fb      	strb	r3, [r7, #11]
          break;
 800769e:	e007      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa0a 	bl	8007abc <USBD_CtlError>
          err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80076ae:	e038      	b.n	8007722 <USBD_GetDescriptor+0x286>
 80076b0:	e037      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7c1b      	ldrb	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c2:	f107 0208 	add.w	r2, r7, #8
 80076c6:	4610      	mov	r0, r2
 80076c8:	4798      	blx	r3
 80076ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076cc:	e029      	b.n	8007722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9f3 	bl	8007abc <USBD_CtlError>
        err++;
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	3301      	adds	r3, #1
 80076da:	72fb      	strb	r3, [r7, #11]
      break;
 80076dc:	e021      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7c1b      	ldrb	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10d      	bne.n	8007702 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	f107 0208 	add.w	r2, r7, #8
 80076f2:	4610      	mov	r0, r2
 80076f4:	4798      	blx	r3
 80076f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3301      	adds	r3, #1
 80076fc:	2207      	movs	r2, #7
 80076fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007700:	e00f      	b.n	8007722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f9d9 	bl	8007abc <USBD_CtlError>
        err++;
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	3301      	adds	r3, #1
 800770e:	72fb      	strb	r3, [r7, #11]
      break;
 8007710:	e007      	b.n	8007722 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f9d1 	bl	8007abc <USBD_CtlError>
      err++;
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	3301      	adds	r3, #1
 800771e:	72fb      	strb	r3, [r7, #11]
      break;
 8007720:	bf00      	nop
  }

  if (err != 0U)
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d11c      	bne.n	8007762 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007728:	893b      	ldrh	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d011      	beq.n	8007752 <USBD_GetDescriptor+0x2b6>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	88db      	ldrh	r3, [r3, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88da      	ldrh	r2, [r3, #6]
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	4293      	cmp	r3, r2
 800773e:	bf28      	it	cs
 8007740:	4613      	movcs	r3, r2
 8007742:	b29b      	uxth	r3, r3
 8007744:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	461a      	mov	r2, r3
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa1f 	bl	8007b90 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	88db      	ldrh	r3, [r3, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa58 	bl	8007c10 <USBD_CtlSendStatus>
 8007760:	e000      	b.n	8007764 <USBD_GetDescriptor+0x2c8>
    return;
 8007762:	bf00      	nop
    }
  }
}
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop

0800776c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	889b      	ldrh	r3, [r3, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d130      	bne.n	80077e0 <USBD_SetAddress+0x74>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88db      	ldrh	r3, [r3, #6]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d12c      	bne.n	80077e0 <USBD_SetAddress+0x74>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	2b7f      	cmp	r3, #127	@ 0x7f
 800778c:	d828      	bhi.n	80077e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007798:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d104      	bne.n	80077ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f988 	bl	8007abc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	e01d      	b.n	80077ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7bfa      	ldrb	r2, [r7, #15]
 80077b2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fd56 	bl	800826c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa25 	bl	8007c10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d4:	e009      	b.n	80077ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077de:	e004      	b.n	80077ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f96a 	bl	8007abc <USBD_CtlError>
  }
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	4b41      	ldr	r3, [pc, #260]	@ (800790c <USBD_SetConfig+0x118>)
 8007806:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007808:	4b40      	ldr	r3, [pc, #256]	@ (800790c <USBD_SetConfig+0x118>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d904      	bls.n	800781a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f952 	bl	8007abc <USBD_CtlError>
 8007818:	e075      	b.n	8007906 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007820:	2b02      	cmp	r3, #2
 8007822:	d002      	beq.n	800782a <USBD_SetConfig+0x36>
 8007824:	2b03      	cmp	r3, #3
 8007826:	d023      	beq.n	8007870 <USBD_SetConfig+0x7c>
 8007828:	e062      	b.n	80078f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800782a:	4b38      	ldr	r3, [pc, #224]	@ (800790c <USBD_SetConfig+0x118>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d01a      	beq.n	8007868 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007832:	4b36      	ldr	r3, [pc, #216]	@ (800790c <USBD_SetConfig+0x118>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007844:	4b31      	ldr	r3, [pc, #196]	@ (800790c <USBD_SetConfig+0x118>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff f9e8 	bl	8006c20 <USBD_SetClassConfig>
 8007850:	4603      	mov	r3, r0
 8007852:	2b02      	cmp	r3, #2
 8007854:	d104      	bne.n	8007860 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f92f 	bl	8007abc <USBD_CtlError>
            return;
 800785e:	e052      	b.n	8007906 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9d5 	bl	8007c10 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007866:	e04e      	b.n	8007906 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9d1 	bl	8007c10 <USBD_CtlSendStatus>
        break;
 800786e:	e04a      	b.n	8007906 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007870:	4b26      	ldr	r3, [pc, #152]	@ (800790c <USBD_SetConfig+0x118>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d112      	bne.n	800789e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007880:	4b22      	ldr	r3, [pc, #136]	@ (800790c <USBD_SetConfig+0x118>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800788a:	4b20      	ldr	r3, [pc, #128]	@ (800790c <USBD_SetConfig+0x118>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff f9e4 	bl	8006c5e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f9ba 	bl	8007c10 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800789c:	e033      	b.n	8007906 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800789e:	4b1b      	ldr	r3, [pc, #108]	@ (800790c <USBD_SetConfig+0x118>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d01d      	beq.n	80078e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff f9d2 	bl	8006c5e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078ba:	4b14      	ldr	r3, [pc, #80]	@ (800790c <USBD_SetConfig+0x118>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078c4:	4b11      	ldr	r3, [pc, #68]	@ (800790c <USBD_SetConfig+0x118>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff f9a8 	bl	8006c20 <USBD_SetClassConfig>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d104      	bne.n	80078e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8ef 	bl	8007abc <USBD_CtlError>
            return;
 80078de:	e012      	b.n	8007906 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f995 	bl	8007c10 <USBD_CtlSendStatus>
        break;
 80078e6:	e00e      	b.n	8007906 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f991 	bl	8007c10 <USBD_CtlSendStatus>
        break;
 80078ee:	e00a      	b.n	8007906 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f8e2 	bl	8007abc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078f8:	4b04      	ldr	r3, [pc, #16]	@ (800790c <USBD_SetConfig+0x118>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff f9ad 	bl	8006c5e <USBD_ClrClassConfig>
        break;
 8007904:	bf00      	nop
    }
  }
}
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000218 	.word	0x20000218

08007910 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	88db      	ldrh	r3, [r3, #6]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d004      	beq.n	800792c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8c9 	bl	8007abc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800792a:	e022      	b.n	8007972 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007932:	2b02      	cmp	r3, #2
 8007934:	dc02      	bgt.n	800793c <USBD_GetConfig+0x2c>
 8007936:	2b00      	cmp	r3, #0
 8007938:	dc03      	bgt.n	8007942 <USBD_GetConfig+0x32>
 800793a:	e015      	b.n	8007968 <USBD_GetConfig+0x58>
 800793c:	2b03      	cmp	r3, #3
 800793e:	d00b      	beq.n	8007958 <USBD_GetConfig+0x48>
 8007940:	e012      	b.n	8007968 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3308      	adds	r3, #8
 800794c:	2201      	movs	r2, #1
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f91d 	bl	8007b90 <USBD_CtlSendData>
        break;
 8007956:	e00c      	b.n	8007972 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	2201      	movs	r2, #1
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f915 	bl	8007b90 <USBD_CtlSendData>
        break;
 8007966:	e004      	b.n	8007972 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f8a6 	bl	8007abc <USBD_CtlError>
        break;
 8007970:	bf00      	nop
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800798a:	3b01      	subs	r3, #1
 800798c:	2b02      	cmp	r3, #2
 800798e:	d81e      	bhi.n	80079ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	88db      	ldrh	r3, [r3, #6]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d004      	beq.n	80079a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f88e 	bl	8007abc <USBD_CtlError>
        break;
 80079a0:	e01a      	b.n	80079d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d005      	beq.n	80079be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f043 0202 	orr.w	r2, r3, #2
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	330c      	adds	r3, #12
 80079c2:	2202      	movs	r2, #2
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8e2 	bl	8007b90 <USBD_CtlSendData>
      break;
 80079cc:	e004      	b.n	80079d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f873 	bl	8007abc <USBD_CtlError>
      break;
 80079d6:	bf00      	nop
  }
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d106      	bne.n	8007a00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f908 	bl	8007c10 <USBD_CtlSendStatus>
  }
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d80b      	bhi.n	8007a36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d10c      	bne.n	8007a40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8ee 	bl	8007c10 <USBD_CtlSendStatus>
      }
      break;
 8007a34:	e004      	b.n	8007a40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f83f 	bl	8007abc <USBD_CtlError>
      break;
 8007a3e:	e000      	b.n	8007a42 <USBD_ClrFeature+0x3a>
      break;
 8007a40:	bf00      	nop
  }
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785a      	ldrb	r2, [r3, #1]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	3302      	adds	r3, #2
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	3303      	adds	r3, #3
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	4413      	add	r3, r2
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	3304      	adds	r3, #4
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	3305      	adds	r3, #5
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4413      	add	r3, r2
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	3306      	adds	r3, #6
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	3307      	adds	r3, #7
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	021b      	lsls	r3, r3, #8
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	80da      	strh	r2, [r3, #6]

}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr

08007abc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ac6:	2180      	movs	r1, #128	@ 0x80
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fb65 	bl	8008198 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb61 	bl	8008198 <USBD_LL_StallEP>
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d032      	beq.n	8007b5a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f834 	bl	8007b62 <USBD_GetLen>
 8007afa:	4603      	mov	r3, r0
 8007afc:	3301      	adds	r3, #1
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	75fa      	strb	r2, [r7, #23]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4413      	add	r3, r2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7812      	ldrb	r2, [r2, #0]
 8007b18:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	75fa      	strb	r2, [r7, #23]
 8007b20:	461a      	mov	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	2203      	movs	r2, #3
 8007b28:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b2a:	e012      	b.n	8007b52 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	60fa      	str	r2, [r7, #12]
 8007b32:	7dfa      	ldrb	r2, [r7, #23]
 8007b34:	1c51      	adds	r1, r2, #1
 8007b36:	75f9      	strb	r1, [r7, #23]
 8007b38:	4611      	mov	r1, r2
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	75fa      	strb	r2, [r7, #23]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e8      	bne.n	8007b2c <USBD_GetString+0x4e>
    }
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b6e:	e005      	b.n	8007b7c <USBD_GetLen+0x1a>
  {
    len++;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	3301      	adds	r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f5      	bne.n	8007b70 <USBD_GetLen+0xe>
  }

  return len;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007ba6:	88fa      	ldrh	r2, [r7, #6]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fb76 	bl	80082aa <USBD_LL_Transmit>

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd6:	88fb      	ldrh	r3, [r7, #6]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	2100      	movs	r1, #0
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fb64 	bl	80082aa <USBD_LL_Transmit>

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	2100      	movs	r1, #0
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fb75 	bl	80082f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c20:	2300      	movs	r3, #0
 8007c22:	2200      	movs	r2, #0
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fb3f 	bl	80082aa <USBD_LL_Transmit>

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2205      	movs	r2, #5
 8007c42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c46:	2300      	movs	r3, #0
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fb4f 	bl	80082f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c60:	2200      	movs	r2, #0
 8007c62:	490e      	ldr	r1, [pc, #56]	@ (8007c9c <MX_USB_DEVICE_Init+0x40>)
 8007c64:	480e      	ldr	r0, [pc, #56]	@ (8007ca0 <MX_USB_DEVICE_Init+0x44>)
 8007c66:	f7fe ff81 	bl	8006b6c <USBD_Init>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c70:	f7f8 fe1e 	bl	80008b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007c74:	490b      	ldr	r1, [pc, #44]	@ (8007ca4 <MX_USB_DEVICE_Init+0x48>)
 8007c76:	480a      	ldr	r0, [pc, #40]	@ (8007ca0 <MX_USB_DEVICE_Init+0x44>)
 8007c78:	f7fe ffa3 	bl	8006bc2 <USBD_RegisterClass>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c82:	f7f8 fe15 	bl	80008b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c86:	4806      	ldr	r0, [pc, #24]	@ (8007ca0 <MX_USB_DEVICE_Init+0x44>)
 8007c88:	f7fe ffb4 	bl	8006bf4 <USBD_Start>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007c92:	f7f8 fe0d 	bl	80008b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c96:	bf00      	nop
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000118 	.word	0x20000118
 8007ca0:	2000021c 	.word	0x2000021c
 8007ca4:	20000010 	.word	0x20000010

08007ca8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2212      	movs	r2, #18
 8007cb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cba:	4b03      	ldr	r3, [pc, #12]	@ (8007cc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20000134 	.word	0x20000134

08007ccc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	6039      	str	r1, [r7, #0]
 8007cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cde:	4b03      	ldr	r3, [pc, #12]	@ (8007cec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	20000148 	.word	0x20000148

08007cf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4907      	ldr	r1, [pc, #28]	@ (8007d24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d06:	4808      	ldr	r0, [pc, #32]	@ (8007d28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d08:	f7ff fee9 	bl	8007ade <USBD_GetString>
 8007d0c:	e004      	b.n	8007d18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	4904      	ldr	r1, [pc, #16]	@ (8007d24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d12:	4805      	ldr	r0, [pc, #20]	@ (8007d28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d14:	f7ff fee3 	bl	8007ade <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d18:	4b02      	ldr	r3, [pc, #8]	@ (8007d24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	200004e0 	.word	0x200004e0
 8007d28:	08008440 	.word	0x08008440

08007d2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	6039      	str	r1, [r7, #0]
 8007d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	4904      	ldr	r1, [pc, #16]	@ (8007d4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d3c:	4804      	ldr	r0, [pc, #16]	@ (8007d50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d3e:	f7ff fece 	bl	8007ade <USBD_GetString>
  return USBD_StrDesc;
 8007d42:	4b02      	ldr	r3, [pc, #8]	@ (8007d4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	200004e0 	.word	0x200004e0
 8007d50:	08008450 	.word	0x08008450

08007d54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	6039      	str	r1, [r7, #0]
 8007d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	221a      	movs	r2, #26
 8007d64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d66:	f000 f843 	bl	8007df0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d6a:	4b02      	ldr	r3, [pc, #8]	@ (8007d74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	2000014c 	.word	0x2000014c

08007d78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d105      	bne.n	8007d96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	4907      	ldr	r1, [pc, #28]	@ (8007dac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d8e:	4808      	ldr	r0, [pc, #32]	@ (8007db0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d90:	f7ff fea5 	bl	8007ade <USBD_GetString>
 8007d94:	e004      	b.n	8007da0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	4904      	ldr	r1, [pc, #16]	@ (8007dac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d9a:	4805      	ldr	r0, [pc, #20]	@ (8007db0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d9c:	f7ff fe9f 	bl	8007ade <USBD_GetString>
  }
  return USBD_StrDesc;
 8007da0:	4b02      	ldr	r3, [pc, #8]	@ (8007dac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200004e0 	.word	0x200004e0
 8007db0:	08008464 	.word	0x08008464

08007db4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d105      	bne.n	8007dd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	4907      	ldr	r1, [pc, #28]	@ (8007de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dca:	4808      	ldr	r0, [pc, #32]	@ (8007dec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dcc:	f7ff fe87 	bl	8007ade <USBD_GetString>
 8007dd0:	e004      	b.n	8007ddc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	4904      	ldr	r1, [pc, #16]	@ (8007de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dd6:	4805      	ldr	r0, [pc, #20]	@ (8007dec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dd8:	f7ff fe81 	bl	8007ade <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ddc:	4b02      	ldr	r3, [pc, #8]	@ (8007de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	200004e0 	.word	0x200004e0
 8007dec:	08008470 	.word	0x08008470

08007df0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007df6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e34 <Get_SerialNum+0x44>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <Get_SerialNum+0x48>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e02:	4b0e      	ldr	r3, [pc, #56]	@ (8007e3c <Get_SerialNum+0x4c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e16:	2208      	movs	r2, #8
 8007e18:	4909      	ldr	r1, [pc, #36]	@ (8007e40 <Get_SerialNum+0x50>)
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 f814 	bl	8007e48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e20:	2204      	movs	r2, #4
 8007e22:	4908      	ldr	r1, [pc, #32]	@ (8007e44 <Get_SerialNum+0x54>)
 8007e24:	68b8      	ldr	r0, [r7, #8]
 8007e26:	f000 f80f 	bl	8007e48 <IntToUnicode>
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	1ffff7e8 	.word	0x1ffff7e8
 8007e38:	1ffff7ec 	.word	0x1ffff7ec
 8007e3c:	1ffff7f0 	.word	0x1ffff7f0
 8007e40:	2000014e 	.word	0x2000014e
 8007e44:	2000015e 	.word	0x2000015e

08007e48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75fb      	strb	r3, [r7, #23]
 8007e5e:	e027      	b.n	8007eb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	0f1b      	lsrs	r3, r3, #28
 8007e64:	2b09      	cmp	r3, #9
 8007e66:	d80b      	bhi.n	8007e80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	0f1b      	lsrs	r3, r3, #28
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	4619      	mov	r1, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	440b      	add	r3, r1
 8007e78:	3230      	adds	r2, #48	@ 0x30
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e00a      	b.n	8007e96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	0f1b      	lsrs	r3, r3, #28
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	440b      	add	r3, r1
 8007e90:	3237      	adds	r2, #55	@ 0x37
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	3301      	adds	r3, #1
 8007eae:	75fb      	strb	r3, [r7, #23]
 8007eb0:	7dfa      	ldrb	r2, [r7, #23]
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d3d3      	bcc.n	8007e60 <IntToUnicode+0x18>
  }
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8007f08 <HAL_PCD_MspInit+0x44>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d113      	bne.n	8007efe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f0c <HAL_PCD_MspInit+0x48>)
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	4a0c      	ldr	r2, [pc, #48]	@ (8007f0c <HAL_PCD_MspInit+0x48>)
 8007edc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ee0:	61d3      	str	r3, [r2, #28]
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <HAL_PCD_MspInit+0x48>)
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	2014      	movs	r0, #20
 8007ef4:	f7f9 fb21 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ef8:	2014      	movs	r0, #20
 8007efa:	f7f9 fb3a 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40005c00 	.word	0x40005c00
 8007f0c:	40021000 	.word	0x40021000

08007f10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f7fe feac 	bl	8006c84 <USBD_LL_SetupStage>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	440b      	add	r3, r1
 8007f54:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f7fe fede 	bl	8006d1e <USBD_LL_DataOutStage>
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8007f7c:	78fa      	ldrb	r2, [r7, #3]
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	440b      	add	r3, r1
 8007f8a:	333c      	adds	r3, #60	@ 0x3c
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	4619      	mov	r1, r3
 8007f92:	f7fe ff35 	bl	8006e00 <USBD_LL_DataInStage>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff f845 	bl	800703c <USBD_LL_SOF>
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d001      	beq.n	8007fd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007fce:	f7f8 fc6f 	bl	80008b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007fd8:	7bfa      	ldrb	r2, [r7, #15]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fff5 	bl	8006fcc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe ffae 	bl	8006f4a <USBD_LL_Reset>
}
 8007fee:	bf00      	nop
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe ffef 	bl	8006fea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d005      	beq.n	8008020 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <HAL_PCD_SuspendCallback+0x30>)
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	4a03      	ldr	r2, [pc, #12]	@ (8008028 <HAL_PCD_SuspendCallback+0x30>)
 800801a:	f043 0306 	orr.w	r3, r3, #6
 800801e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	e000ed00 	.word	0xe000ed00

0800802c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe ffe9 	bl	8007012 <USBD_LL_Resume>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008050:	4a1f      	ldr	r2, [pc, #124]	@ (80080d0 <USBD_LL_Init+0x88>)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a1d      	ldr	r2, [pc, #116]	@ (80080d0 <USBD_LL_Init+0x88>)
 800805c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008060:	4b1b      	ldr	r3, [pc, #108]	@ (80080d0 <USBD_LL_Init+0x88>)
 8008062:	4a1c      	ldr	r2, [pc, #112]	@ (80080d4 <USBD_LL_Init+0x8c>)
 8008064:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008066:	4b1a      	ldr	r3, [pc, #104]	@ (80080d0 <USBD_LL_Init+0x88>)
 8008068:	2208      	movs	r2, #8
 800806a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800806c:	4b18      	ldr	r3, [pc, #96]	@ (80080d0 <USBD_LL_Init+0x88>)
 800806e:	2202      	movs	r2, #2
 8008070:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008072:	4b17      	ldr	r3, [pc, #92]	@ (80080d0 <USBD_LL_Init+0x88>)
 8008074:	2200      	movs	r2, #0
 8008076:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008078:	4b15      	ldr	r3, [pc, #84]	@ (80080d0 <USBD_LL_Init+0x88>)
 800807a:	2200      	movs	r2, #0
 800807c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800807e:	4b14      	ldr	r3, [pc, #80]	@ (80080d0 <USBD_LL_Init+0x88>)
 8008080:	2200      	movs	r2, #0
 8008082:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008084:	4812      	ldr	r0, [pc, #72]	@ (80080d0 <USBD_LL_Init+0x88>)
 8008086:	f7f9 fe31 	bl	8001cec <HAL_PCD_Init>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008090:	f7f8 fc0e 	bl	80008b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800809a:	2318      	movs	r3, #24
 800809c:	2200      	movs	r2, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	f7fb fb38 	bl	8003714 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080aa:	2358      	movs	r3, #88	@ 0x58
 80080ac:	2200      	movs	r2, #0
 80080ae:	2180      	movs	r1, #128	@ 0x80
 80080b0:	f7fb fb30 	bl	8003714 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080be:	2200      	movs	r2, #0
 80080c0:	2181      	movs	r1, #129	@ 0x81
 80080c2:	f7fb fb27 	bl	8003714 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	200006e0 	.word	0x200006e0
 80080d4:	40005c00 	.word	0x40005c00

080080d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 fefb 	bl	8001eea <HAL_PCD_Start>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f93c 	bl	8008378 <USBD_Get_USB_Status>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008104:	7bbb      	ldrb	r3, [r7, #14]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	461a      	mov	r2, r3
 800811c:	4603      	mov	r3, r0
 800811e:	70fb      	strb	r3, [r7, #3]
 8008120:	460b      	mov	r3, r1
 8008122:	70bb      	strb	r3, [r7, #2]
 8008124:	4613      	mov	r3, r2
 8008126:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008136:	78bb      	ldrb	r3, [r7, #2]
 8008138:	883a      	ldrh	r2, [r7, #0]
 800813a:	78f9      	ldrb	r1, [r7, #3]
 800813c:	f7fa f850 	bl	80021e0 <HAL_PCD_EP_Open>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f916 	bl	8008378 <USBD_Get_USB_Status>
 800814c:	4603      	mov	r3, r0
 800814e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008150:	7bbb      	ldrb	r3, [r7, #14]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	4611      	mov	r1, r2
 8008178:	4618      	mov	r0, r3
 800817a:	f7fa f88e 	bl	800229a <HAL_PCD_EP_Close>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f8f7 	bl	8008378 <USBD_Get_USB_Status>
 800818a:	4603      	mov	r3, r0
 800818c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800818e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fa f91f 	bl	80023fa <HAL_PCD_EP_SetStall>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f8d8 	bl	8008378 <USBD_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b084      	sub	sp, #16
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	4611      	mov	r1, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fa f960 	bl	80024ba <HAL_PCD_EP_ClrStall>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f8b9 	bl	8008378 <USBD_Get_USB_Status>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800820a:	7bbb      	ldrb	r3, [r7, #14]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008226:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800822c:	2b00      	cmp	r3, #0
 800822e:	da0c      	bge.n	800824a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008236:	68f9      	ldr	r1, [r7, #12]
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	440b      	add	r3, r1
 8008244:	3302      	adds	r3, #2
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	e00b      	b.n	8008262 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008250:	68f9      	ldr	r1, [r7, #12]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	440b      	add	r3, r1
 800825c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008260:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	bc80      	pop	{r7}
 800826a:	4770      	bx	lr

0800826c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008286:	78fa      	ldrb	r2, [r7, #3]
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7f9 ff83 	bl	8002196 <HAL_PCD_SetAddress>
 8008290:	4603      	mov	r3, r0
 8008292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 f86e 	bl	8008378 <USBD_Get_USB_Status>
 800829c:	4603      	mov	r3, r0
 800829e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b086      	sub	sp, #24
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	461a      	mov	r2, r3
 80082b6:	460b      	mov	r3, r1
 80082b8:	72fb      	strb	r3, [r7, #11]
 80082ba:	4613      	mov	r3, r2
 80082bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80082cc:	893b      	ldrh	r3, [r7, #8]
 80082ce:	7af9      	ldrb	r1, [r7, #11]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	f7fa f85b 	bl	800238c <HAL_PCD_EP_Transmit>
 80082d6:	4603      	mov	r3, r0
 80082d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 f84b 	bl	8008378 <USBD_Get_USB_Status>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	607a      	str	r2, [r7, #4]
 80082fa:	461a      	mov	r2, r3
 80082fc:	460b      	mov	r3, r1
 80082fe:	72fb      	strb	r3, [r7, #11]
 8008300:	4613      	mov	r3, r2
 8008302:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008312:	893b      	ldrh	r3, [r7, #8]
 8008314:	7af9      	ldrb	r1, [r7, #11]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f7fa f807 	bl	800232a <HAL_PCD_EP_Receive>
 800831c:	4603      	mov	r3, r0
 800831e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f828 	bl	8008378 <USBD_Get_USB_Status>
 8008328:	4603      	mov	r3, r0
 800832a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800832c:	7dbb      	ldrb	r3, [r7, #22]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008340:	4b02      	ldr	r3, [pc, #8]	@ (800834c <USBD_static_malloc+0x14>)
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr
 800834c:	200009d0 	.word	0x200009d0

08008350 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr

08008362 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr

08008378 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d817      	bhi.n	80083bc <USBD_Get_USB_Status+0x44>
 800838c:	a201      	add	r2, pc, #4	@ (adr r2, 8008394 <USBD_Get_USB_Status+0x1c>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083a5 	.word	0x080083a5
 8008398:	080083ab 	.word	0x080083ab
 800839c:	080083b1 	.word	0x080083b1
 80083a0:	080083b7 	.word	0x080083b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e00b      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083aa:	2302      	movs	r3, #2
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	e008      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
    break;
 80083b4:	e005      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083b6:	2302      	movs	r3, #2
 80083b8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ba:	e002      	b.n	80083c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083bc:	2302      	movs	r3, #2
 80083be:	73fb      	strb	r3, [r7, #15]
    break;
 80083c0:	bf00      	nop
  }
  return usb_status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop

080083d0 <memset>:
 80083d0:	4603      	mov	r3, r0
 80083d2:	4402      	add	r2, r0
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d100      	bne.n	80083da <memset+0xa>
 80083d8:	4770      	bx	lr
 80083da:	f803 1b01 	strb.w	r1, [r3], #1
 80083de:	e7f9      	b.n	80083d4 <memset+0x4>

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	2600      	movs	r6, #0
 80083e4:	4d0c      	ldr	r5, [pc, #48]	@ (8008418 <__libc_init_array+0x38>)
 80083e6:	4c0d      	ldr	r4, [pc, #52]	@ (800841c <__libc_init_array+0x3c>)
 80083e8:	1b64      	subs	r4, r4, r5
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	42a6      	cmp	r6, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	f000 f81a 	bl	8008428 <_init>
 80083f4:	2600      	movs	r6, #0
 80083f6:	4d0a      	ldr	r5, [pc, #40]	@ (8008420 <__libc_init_array+0x40>)
 80083f8:	4c0a      	ldr	r4, [pc, #40]	@ (8008424 <__libc_init_array+0x44>)
 80083fa:	1b64      	subs	r4, r4, r5
 80083fc:	10a4      	asrs	r4, r4, #2
 80083fe:	42a6      	cmp	r6, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f855 3b04 	ldr.w	r3, [r5], #4
 8008408:	4798      	blx	r3
 800840a:	3601      	adds	r6, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008412:	4798      	blx	r3
 8008414:	3601      	adds	r6, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	080084a4 	.word	0x080084a4
 800841c:	080084a4 	.word	0x080084a4
 8008420:	080084a4 	.word	0x080084a4
 8008424:	080084a8 	.word	0x080084a8

08008428 <_init>:
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	bf00      	nop
 800842c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842e:	bc08      	pop	{r3}
 8008430:	469e      	mov	lr, r3
 8008432:	4770      	bx	lr

08008434 <_fini>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr
